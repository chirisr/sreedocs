Step 1: Create the Script
Create a script named service-check.sh:

bash
Copy code
#!/bin/sh

check_service() {
  service=$1
  if echo "$service" | grep -q "^http"; then
    host=$(echo "$service" | sed -E 's|https?://([^:/]+).*|\1|')
    port=$(echo "$service" | sed -E 's|.*:(.*)|\1|')
  else
    host=$(echo "$service" | cut -d: -f1)
    port=$(echo "$service" | cut -d: -f2)
  fi

  if [ -z "$port" ]; then
    if echo "$service" | grep -q "^https"; then
      port=443
    else
      port=80
    fi
  fi

  echo "Checking $host on port $port"
  if ping -c 1 "$host" &> /dev/null; then
    echo "$host is reachable"
    if (echo > /dev/tcp/"$host"/"$port") &> /dev/null; then
      echo "$host:$port is up"
    else
      echo "$host:$port is down"
      exit 1
    fi
  else
    echo "$host is unreachable"
    exit 1
  fi
}

services="http://service1:80,https://service2:443,service3:port3"
IFS=',' read -r -a service_array <<< "$services"
for service in "${service_array[@]}"; do
  check_service "$service"
done
echo "All services are up"
Step 2: Create the Dockerfile
Create a Dockerfile to build the image:

Dockerfile
Copy code
# Use a minimal base image
FROM busybox:latest

# Copy the service-check script into the container
COPY service-check.sh /service-check.sh

# Make the script executable
RUN chmod +x /service-check.sh

# Run the script as the entrypoint
ENTRYPOINT ["/service-check.sh"]
Step 3: Build the Docker Image
Navigate to the directory containing service-check.sh and the Dockerfile, then build the Docker image:

sh
Copy code
docker build -t service-check:latest .
Step 4: Modify the OpenShift DeploymentConfig
Use the built image in your OpenShift DeploymentConfig. Update the init container to use the service-check:latest image:

yaml
Copy code
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: my-app
spec:
  replicas: 1
  selector:
    app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      initContainers:
        - name: service-check
          image: service-check:latest
      containers:
        - name: my-app-container
          image: my-app-image:latest
          ports:
            - containerPort: 8080
        - name: sidecar-container
          image: busybox
          command: 
            - sh
            - -c
            - |
              echo "Starting sidecar container"
              while true; do sleep 3600; done
Summary
Script (service-check.sh):

This script checks the reachability of services specified as HTTP, HTTPS, or host
.
It uses a function check_service to encapsulate the logic for checking each service.
The script supports services without explicit ports, defaulting to 80 for HTTP and 443 for HTTPS.
Dockerfile:

The Dockerfile uses busybox as the base image and copies the service-check.sh script into the image.
The script is set as the entrypoint.
Building and Using the Image:

Build the Docker image using the docker build command.
Update the OpenShift DeploymentConfig to use this image for the init container.
This approach ensures that the main application container does not start until all specified services are confirmed to be up and reachable. The sidecar container runs alongside the main container, supporting its operations as needed.



apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: example-deployment
spec:
  replicas: 1
  selector:
    app: example
    deploymentconfig: example-deployment
  template:
    metadata:
      labels:
        app: example
        deploymentconfig: example-deployment
    spec:
      initContainers:
        - name: check-redis
          image: busybox:latest
          command: ['sh', '-c', '
            echo "Checking Redis status...";
            while true; do
              if redis-cli -h redis-host -p 6379 ping | grep PONG; then
                echo "Redis is up!";
                break;
              fi;
              echo "Waiting for Redis...";
              sleep 2;
            done
          ']
      containers:
        - name: sidecar-container
          image: sidecar-image:latest
          ports:
            - containerPort: 8081
          readinessProbe:
            httpGet:
              path: /health
              port: 8081
          livenessProbe:
            httpGet:
              path: /health
              port: 8081
          command: ["/bin/sh", "-c", "touch /data/sidecar-ready && while true; do sleep 3600; done"]
          volumeMounts:
            - name: shared-data
              mountPath: /data
        - name: main-app
          image: main-app-image:latest
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: shared-data
              mountPath: /data
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", '
                  echo "Checking Sidecar status...";
                  retries=10;
                  while [ $retries -gt 0 ]; do
                    if curl -s http://localhost:8081/health | grep "healthy"; then
                      echo "Sidecar is healthy, starting main app";
                      break;
                    fi;
                    echo "Waiting for sidecar to become healthy...";
                    retries=$((retries - 1));
                    sleep 5;
                  done;
                  if [ $retries -le 0 ]; then
                    echo "Sidecar did not become healthy in time, exiting";
                    exit 1;
                  fi
                ']
      volumes:
        - name: shared-data
          emptyDir: {}


Explanation:
Function check_service_status:

This function checks if a specific host and port are reachable.
Hosts and Ports as Comma-Separated Values:

The script defines REDIS_HOSTS and REDIS_PORTS as comma-separated strings.
Similarly, it defines KAFKA_HOSTS and KAFKA_PORTS as comma-separated strings.
Convert Hosts and Ports to Arrays:

The IFS=',' read -r -a REDIS_HOSTS_ARRAY <<< "$REDIS_HOSTS" and similar commands split the comma-separated strings into arrays.
User Input for Service Type:

The script prompts the user to enter the type of service (redis or kafka).
Iterate through Arrays and Check Status:

Depending on whether the user entered redis or kafka, the script iterates through the corresponding host and port arrays.
For each host and port pair, it calls the check_service_status function to check the status of the instance.
This script configuration allows you to check multiple Redis and Kafka instances using comma-separated host and port values directly in the script.


#!/bin/bash

# Function to log messages to a file
log_message() {
    local log_file="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" >> "$log_file"
}

# Function to check the status of the service
check_service_status() {
    local host=$1
    local port=$2
    local service=$3

    if (echo > /dev/tcp/$host/$port) >/dev/null 2>&1; then
        log_message "$LOG_FILE" "$service service is running on $host:$port."
    else
        log_message "$LOG_FILE" "$service service is not running on $host:$port."
    fi
}

# Define the hosts and ports for Redis and Kafka instances as comma-separated values
REDIS_HOSTS="127.0.0.1,127.0.0.2"
REDIS_PORTS="6379,6380"
KAFKA_HOSTS="127.0.0.1,127.0.0.2"
KAFKA_PORTS="9092,9093"

# Convert the hosts and ports into arrays
IFS=',' read -r -a REDIS_HOSTS_ARRAY <<< "$REDIS_HOSTS"
IFS=',' read -r -a REDIS_PORTS_ARRAY <<< "$REDIS_PORTS"
IFS=',' read -r -a KAFKA_HOSTS_ARRAY <<< "$KAFKA_HOSTS"
IFS=',' read -r -a KAFKA_PORTS_ARRAY <<< "$KAFKA_PORTS"

# Get the service type from the user
echo "Enter the service type (redis/kafka): "
read service_type

# Set the log file path
LOG_FILE="service_check.log"

# Initialize the log file
echo "Service Check Log" > "$LOG_FILE"

# Check the status of the specified service instances
case $service_type in
    redis)
        SERVICE="Redis"
        for i in "${!REDIS_HOSTS_ARRAY[@]}"; do
            check_service_status "${REDIS_HOSTS_ARRAY[$i]}" "${REDIS_PORTS_ARRAY[$i]}" $SERVICE
        done
        ;;
    kafka)
        SERVICE="Kafka"
        for i in "${!KAFKA_HOSTS_ARRAY[@]}"; do
            check_service_status "${KAFKA_HOSTS_ARRAY[$i]}" "${KAFKA_PORTS_ARRAY[$i]}" $SERVICE
        done
        ;;
    *)
        echo "Invalid service type. Please enter 'redis' or 'kafka'."
        exit 1
        ;;
esac

# Log completion message
log_message "$LOG_FILE" "Service check completed."
In this script:

The log_message function writes a message along with a timestamp to the specified log file.
Before executing any checks, the script initializes the log file with a header.
After checking the status of all instances, it logs a completion message to the log file.
You can customize the log file path (LOG_FILE) as needed. When the script is run, it will log all service status messages to the specified log file.





#!/bin/bash

# Function to log messages to a file and console
log_message() {
    local log_file="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" | tee -a "$log_file"
}

# Function to check the status of the service
check_service_status() {
    local host=$1
    local port=$2
    local service=$3

    if (echo > /dev/tcp/$host/$port) >/dev/null 2>&1; then
        log_message "$LOG_FILE" "$service service is running on $host:$port."
    else
        log_message "$LOG_FILE" "$service service is not running on $host:$port."
    fi
}

# Define Redis cluster and standalone details
REDIS_CLUSTER_HOSTS="127.0.0.1,localhost,example.com"
REDIS_CLUSTER_PORTS="7000,7001,7002"
REDIS_STANDALONE_HOSTS="127.0.0.1,localhost,example.com"
REDIS_STANDALONE_PORTS="6379,6379,6379"

# Define Kafka host and port values
KAFKA_HOSTS="127.0.0.1,localhost,example.com"
KAFKA_PORTS="9092,9093,9094"

# Convert comma-separated hosts and ports into arrays
IFS=',' read -r -a REDIS_CLUSTER_HOSTS_ARRAY <<< "$REDIS_CLUSTER_HOSTS"
IFS=',' read -r -a REDIS_CLUSTER_PORTS_ARRAY <<< "$REDIS_CLUSTER_PORTS"
IFS=',' read -r -a REDIS_STANDALONE_HOSTS_ARRAY <<< "$REDIS_STANDALONE_HOSTS"
IFS=',' read -r -a REDIS_STANDALONE_PORTS_ARRAY <<< "$REDIS_STANDALONE_PORTS"
IFS=',' read -r -a KAFKA_HOSTS_ARRAY <<< "$KAFKA_HOSTS"
IFS=',' read -r -a KAFKA_PORTS_ARRAY <<< "$KAFKA_PORTS"

# Set the log file path
LOG_FILE="service_check.log"

# Initialize the log file
echo "Service Check Log" > "$LOG_FILE"

# Function to check Redis cluster or standalone
check_redis_status() {
    local redis_type=$1
    local hosts_array
    local ports_array

    if [ "$redis_type" == "cluster" ]; then
        hosts_array=("${REDIS_CLUSTER_HOSTS_ARRAY[@]}")
        ports_array=("${REDIS_CLUSTER_PORTS_ARRAY[@]}")
        SERVICE="Redis Cluster"
    elif [ "$redis_type" == "standalone" ]; then
        hosts_array=("${REDIS_STANDALONE_HOSTS_ARRAY[@]}")
        ports_array=("${REDIS_STANDALONE_PORTS_ARRAY[@]}")
        SERVICE="Redis Standalone"
    else
        echo "Invalid Redis type. Please set redis_type to 'cluster' or 'standalone'."
        exit 1
    fi

    for i in "${!hosts_array[@]}"; do
        check_service_status "${hosts_array[$i]}" "${ports_array[$i]}" $SERVICE
    done
}

# Check the status of Redis instances (both cluster and standalone)
check_redis_status "cluster"
check_redis_status "standalone"

# Check the status of Kafka instances
SERVICE="Kafka"
for i in "${!KAFKA_HOSTS_ARRAY[@]}"; do
    check_service_status "${KAFKA_HOSTS_ARRAY[$i]}" "${KAFKA_PORTS_ARRAY[$i]}" $SERVICE
done




#!/bin/bash

# Function to log messages to a file and console
log_message() {
    local log_file="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" | tee -a "$log_file"
}

# Function to check the status of the service
check_service_status() {
    local host=$1
    local port=$2
    local service=$3

    if (echo > /dev/tcp/$host/$port) >/dev/null 2>&1; then
        log_message "$LOG_FILE" "$service service is running on $host:$port."
        return 0
    else
        log_message "$LOG_FILE" "$service service is not running on $host:$port."
        return 1
    fi
}

# Initialize log file
LOG_FILE="/mnt/scripts/service_check.log"
echo "Service Check Log" > "$LOG_FILE"
log_message "$LOG_FILE" "Starting service checks."

# Flag to determine Redis cluster or standalone
REDIS_CLUSTER_FLAG=${REDIS_CLUSTER_FLAG:-true}

# Define Redis cluster and standalone details
REDIS_CLUSTER_HOSTS="127.0.0.1,localhost,example.com"
REDIS_CLUSTER_PORTS="7000,7001,7002"
REDIS_STANDALONE_HOSTS="127.0.0.1,localhost,example.com"
REDIS_STANDALONE_PORTS="6379,6379,6379"

# Define Kafka host and port values
KAFKA_HOSTS="127.0.0.1,localhost,example.com"
KAFKA_PORTS="9092,9093,9094"

# Convert comma-separated hosts and ports into arrays
IFS=',' read -r -a KAFKA_HOSTS_ARRAY <<< "$KAFKA_HOSTS"
IFS=',' read -r -a KAFKA_PORTS_ARRAY <<< "$KAFKA_PORTS"

# Function to check Redis status based on the cluster flag
check_redis_status() {
    local hosts_array
    local ports_array
    local service

    if [ "$REDIS_CLUSTER_FLAG" = true ]; then
        IFS=',' read -r -a hosts_array <<< "$REDIS_CLUSTER_HOSTS"
        IFS=',' read -r -a ports_array <<< "$REDIS_CLUSTER_PORTS"
        service="Redis Cluster"
        log_message "$LOG_FILE" "Checking Redis Cluster services."
    else
        IFS=',' read -r -a hosts_array <<< "$REDIS_STANDALONE_HOSTS"
        IFS=',' read -r -a ports_array <<< "$REDIS_STANDALONE_PORTS"
        service="Redis Standalone"
        log_message "$LOG_FILE" "Checking Redis Standalone services."
    fi

    for i in "${!hosts_array[@]}"; do
        if ! check_service_status "${hosts_array[$i]}" "${ports_array[$i]}" "$service"; then
            return 1
        fi
    done
}

# Check the status of Redis instances based on the cluster flag
if ! check_redis_status; then
    log_message "$LOG_FILE" "One or more Redis services are not running. Exiting with status 1."
    exit 1
fi

# Check the status of Kafka instances
SERVICE="Kafka"
log_message "$LOG_FILE" "Checking Kafka services."
for i in "${!KAFKA_HOSTS_ARRAY[@]}"; do
    if ! check_service_status "${KAFKA_HOSTS_ARRAY[$i]}" "${KAFKA_PORTS_ARRAY[$i]}" "$SERVICE"; then
        log_message "$LOG_FILE" "One or more Kafka services are not running. Exiting with status 1."
        exit 1
    fi
done

# Log completion message
log_message "$LOG_FILE" "Service check completed successfully."
exit 0

#!/bin/bash

log_message() {
    local log_file="$1"
    local level="$2"
    local message="$3"

    case "$LOG_LEVEL" in
        DEBUG)
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $level - $message" | tee -a "$log_file"
            ;;
        INFO)
            [[ "$level" != "DEBUG" ]] && echo "$(date '+%Y-%m-%d %H:%M:%S') - $level - $message" | tee -a "$log_file"
            ;;
        ERROR)
            [[ "$level" == "ERROR" ]] && echo "$(date '+%Y-%m-%d %H:%M:%S') - $level - $message" | tee -a "$log_file"
            ;;
        *)
            echo "Invalid log level: $LOG_LEVEL"
            exit 1
            ;;
    esac
}

load_properties() {
    local file="$1"
    if [ -f "$file" ]; then
        log_message "$LOG_FILE" "INFO" "Loading properties from $file."
        while IFS='=' read -r key value; do
            eval "${key}='${value}'"
        done < "$file"
    else
        log_message "$LOG_FILE" "ERROR" "Properties file $file not found."
    fi
}

check_service_status() {
    local host=$1
    local port=$2
    local service=$3

    if [ -z "$host" ] || [ -z "$port" ]; then
        log_message "$LOG_FILE" "ERROR" "Error: Host or port is empty for $service service."
        return 1
    fi

    log_message "$LOG_FILE" "DEBUG" "Checking $service service on $host:$port..."

    if (echo > /dev/tcp/$host/$port) >/dev/null 2>&1; then
        log_message "$LOG_FILE" "INFO" "$service service is running on $host:$port."
        return 0
    else
        log_message "$LOG_FILE" "ERROR" "$service service is not running on $host:$port."
        return 1
    fi
}

# Initialize log file
LOG_FILE="/mnt/scripts/service_check.log"
LOG_LEVEL=${LOG_LEVEL:-"INFO"}  # Default log level is INFO
echo "Service Check Log" > "$LOG_FILE"
log_message "$LOG_FILE" "INFO" "Starting service checks."

# Load properties from file if present
PROPERTIES_FILE="/mnt/config/config.properties"
load_properties "$PROPERTIES_FILE"

# Set environment variables or fallback to properties
REDIS_CLUSTER_FLAG=${REDIS_CLUSTER_FLAG:-$REDIS_CLUSTER_FLAG}
REDIS_CLUSTER_HOSTS=${REDIS_CLUSTER_HOSTS:-$REDIS_CLUSTER_HOSTS}
REDIS_CLUSTER_PORTS=${REDIS_CLUSTER_PORTS:-$REDIS_CLUSTER_PORTS}
REDIS_STANDALONE_HOSTS=${REDIS_STANDALONE_HOSTS:-$REDIS_STANDALONE_HOSTS}
REDIS_STANDALONE_PORTS=${REDIS_STANDALONE_PORTS:-$REDIS_STANDALONE_PORTS}
KAFKA_ENABLED=${KAFKA_ENABLED:-$KAFKA_ENABLED}
KAFKA_HOSTS=${KAFKA_HOSTS:-$KAFKA_HOSTS}
KAFKA_PORTS=${KAFKA_PORTS:-$KAFKA_PORTS}

# Check if necessary variables are set
if [ "$KAFKA_ENABLED" = true ]; then
    if [ -z "$KAFKA_HOSTS" ] || [ -z "$KAFKA_PORTS" ]; then
        log_message "$LOG_FILE" "ERROR" "Error: KAFKA_HOSTS or KAFKA_PORTS is not set."
        exit 1
    fi
fi

if [ "$REDIS_CLUSTER_FLAG" = true ]; then
    if [ -z "$REDIS_CLUSTER_HOSTS" ] || [ -z "$REDIS_CLUSTER_PORTS" ]; then
        log_message "$LOG_FILE" "ERROR" "Error: REDIS_CLUSTER_HOSTS or REDIS_CLUSTER_PORTS is not set."
        exit 1
    fi
else
    if [ -z "$REDIS_STANDALONE_HOSTS" ] || [ -z "$REDIS_STANDALONE_PORTS" ]; then
        log_message "$LOG_FILE" "ERROR" "Error: REDIS_STANDALONE_HOSTS or REDIS_STANDALONE_PORTS is not set."
        exit 1
    fi
fi

check_redis_status() {
    local hosts_array
    local ports_array
    local service

    if [ "$REDIS_CLUSTER_FLAG" = true ]; then
        IFS=',' read -r -a hosts_array <<< "$REDIS_CLUSTER_HOSTS"
        IFS=',' read -r -a ports_array <<< "$REDIS_CLUSTER_PORTS"
        service="Redis Cluster"
        log_message "$LOG_FILE" "INFO" "Checking Redis Cluster services."
    else
        IFS=',' read -r -a hosts_array <<< "$REDIS_STANDALONE_HOSTS"
        IFS=',' read -r -a ports_array <<< "$REDIS_STANDALONE_PORTS"
        service="Redis Standalone"
        log_message "$LOG_FILE" "INFO" "Checking Redis Standalone services."
    fi

    for i in "${!hosts_array[@]}"; do
        if ! check_service_status "${hosts_array[$i]}" "${ports_array[$i]}" "$service"; then
            return 1
        fi
    done
}

check_kafka_status() {
    if [ "$KAFKA_ENABLED" = true ]; then
        IFS=',' read -r -a KAFKA_HOSTS_ARRAY <<< "$KAFKA_HOSTS"
        IFS=',' read -r -a KAFKA_PORTS_ARRAY <<< "$KAFKA_PORTS"
        local service="Kafka"
        log_message "$LOG_FILE" "INFO" "Checking Kafka services."

        for i in "${!KAFKA_HOSTS_ARRAY[@]}"; do
            if ! check_service_status "${KAFKA_HOSTS_ARRAY[$i]}" "${KAFKA_PORTS_ARRAY[$i]}" "$service"; then
                return 1
            fi
        done
    else
        log_message "$LOG_FILE" "INFO" "Kafka is disabled, skipping Kafka service checks."
    fi
}

# Check the status of Redis instances based on the cluster flag
if ! check_redis_status; then
    log_message "$LOG_FILE" "ERROR" "One or more Redis services are not running. Exiting with status 1."
    exit 1
fi

# Check the status of Kafka instances if Kafka is enabled
if ! check_kafka_status; then
    log_message "$LOG_FILE" "ERROR" "One or more Kafka services are not running. Exiting with status 1."
    exit 1
fi

# Log completion message
log_message "$LOG_FILE" "INFO" "Service check completed successfully."
exit 0

Detailed Explanation for End Users
Inputs in the ConfigMap
REDIS_CLUSTER_HOSTS: Comma-separated list of hosts for Redis Cluster.
REDIS_CLUSTER_PORTS: Comma-separated list of ports corresponding to the Redis Cluster hosts.
REDIS_STANDALONE_HOSTS: Comma-separated list of hosts for Redis Standalone.
REDIS_STANDALONE_PORTS: Comma-separated list of ports corresponding to the Redis Standalone hosts.
KAFKA_ENABLED: Boolean value (true or false) indicating if Kafka checks are enabled.
KAFKA_HOSTS: Comma-separated list of hosts for Kafka.
KAFKA_PORTS: Comma-separated list of ports corresponding to the Kafka hosts.
What Happens During Execution
Script Execution: The init container runs the service_check.sh script.
Loading Properties: The script loads properties from the ConfigMap (/mnt/config/config.properties).
Environment Variables: If environment variables are set, they override the properties.
Redis and Kafka Checks:
The script checks the status of Redis Cluster or Redis Standalone services based on the REDIS_CLUSTER_FLAG.
If KAFKA_ENABLED is true, the script checks the status of Kafka services.
Logging: The script logs actions and errors to /mnt/scripts/service_check.log.
Error Handling:
If required properties (e.g., hosts and ports) are missing, the script logs an error and exits with status 1.
If any service is not running, the script logs an error and exits with status 1.
Behavior if Inputs Are Missing
Missing ConfigMap: The script logs an error and exits if the ConfigMap service-config is not found.
Missing Properties: The script logs an error and exits if any required properties are missing.
Service Not Running: The script logs an error and exits if any checked service is not running.
