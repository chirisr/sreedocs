#!/bin/bash

# Log levels
DEBUG=0
INFO=1
WARNING=2
ERROR=3
FATAL=4

# Default log level
LOG_LEVEL=$INFO

# Function to log messages with different log levels
log_message() {
    local level=$1
    local log_file=$2
    local message=$3

    case $level in
        $DEBUG)
            level_name="DEBUG"
            ;;
        $INFO)
            level_name="INFO"
            ;;
        $WARNING)
            level_name="WARNING"
            ;;
        $ERROR)
            level_name="ERROR"
            ;;
        $FATAL)
            level_name="FATAL"
            ;;
        *)
            level_name="UNKNOWN"
            ;;
    esac

    if [ $level -ge $LOG_LEVEL ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $level_name - $message" | tee -a "$log_file"
    fi
}

# Function to load properties from a file
load_properties() {
    local file="$1"
    if [ -f "$file" ]; then
        log_message $INFO "$LOG_FILE" "Loading properties from $file."
        while IFS='=' read -r key value; do
            eval "${key}='${value}'"
        done < "$file"
    else
        log_message $ERROR "$LOG_FILE" "Properties file $file not found."
        exit 1
    fi
}

# Function to check the status of the service
check_service_status() {
    local host=$1
    local port=$2
    local service=$3

    if [ -z "$host" ] || [ -z "$port" ]; then
        log_message $ERROR "$LOG_FILE" "Host or port is empty for $service service."
        return 1
    fi

    log_message $DEBUG "$LOG_FILE" "Checking $service service on $host:$port..."

    if (echo > /dev/tcp/$host/$port) >/dev/null 2>&1; then
        log_message $INFO "$LOG_FILE" "$service service is running on $host:$port."
        return 0
    else
        log_message $ERROR "$LOG_FILE" "$service service is not running on $host:$port."
        return 1
    fi
}

# Initialize log file
LOG_FILE="/mnt/scripts/service_check.log"
echo "Service Check Log" > "$LOG_FILE"
log_message $INFO "$LOG_FILE" "Starting service checks."

# Load properties from file if present
PROPERTIES_FILE="/mnt/config/config.properties"
load_properties "$PROPERTIES_FILE"

# Initialize flags to check presence of properties
REDIS_PROPERTIES_PRESENT=false
KAFKA_PROPERTIES_PRESENT=false

# Check for Redis properties
if [ -n "$REDIS_CLUSTER_FLAG" ] || [ -n "$REDIS_CLUSTER_HOSTS" ] || [ -n "$REDIS_CLUSTER_PORTS" ] || [ -n "$REDIS_STANDALONE_HOSTS" ] || [ -n "$REDIS_STANDALONE_PORTS" ]; then
    REDIS_PROPERTIES_PRESENT=true
    log_message $INFO "$LOG_FILE" "Redis properties found."
fi

# Check for Kafka properties
if [ -n "$KAFKA_ENABLED" ] || [ -n "$KAFKA_HOSTS" ] || [ -n "$KAFKA_PORTS" ]; then
    KAFKA_PROPERTIES_PRESENT=true
    log_message $INFO "$LOG_FILE" "Kafka properties found."
fi

# Fail if neither Redis nor Kafka properties are found
if [ "$REDIS_PROPERTIES_PRESENT" = false ] && [ "$KAFKA_PROPERTIES_PRESENT" = false ]; then
    log_message $FATAL "$LOG_FILE" "Neither Redis nor Kafka properties found. Exiting."
    exit 1
fi

# Function to check Redis status based on the cluster flag
check_redis_status() {
    local hosts_array
    local ports_array
    local service

    if [ "$REDIS_CLUSTER_FLAG" = true ]; then
        IFS=',' read -r -a hosts_array <<< "$REDIS_CLUSTER_HOSTS"
        IFS=',' read -r -a ports_array <<< "$REDIS_CLUSTER_PORTS"
        service="Redis Cluster"
        log_message $INFO "$LOG_FILE" "Checking Redis Cluster services."
    else
        IFS=',' read -r -a hosts_array <<< "$REDIS_STANDALONE_HOSTS"
        IFS=',' read -r -a ports_array <<< "$REDIS_STANDALONE_PORTS"
        service="Redis Standalone"
        log_message $INFO "$LOG_FILE" "Checking Redis Standalone services."
    fi

    for i in "${!hosts_array[@]}"; do
        if [ ${#ports_array[@]} -eq 1 ]; then
            port="${ports_array[0]}"
        else
            port="${ports_array[$i]}"
        fi
        if ! check_service_status "${hosts_array[$i]}" "$port" "$service"; then
            return 1
        fi
    done
}

# Check the status of Redis instances if properties are present
if [ "$REDIS_PROPERTIES_PRESENT" = true ]; then
    if ! check_redis_status; then
        log_message $FATAL "$LOG_FILE" "One or more Redis services are not running. Exiting with status 1."
        exit 1
    fi
fi

# Function to check Kafka status if enabled
check_kafka_status() {
    if [ "$KAFKA_ENABLED" = true ]; then
        if [ -z "$KAFKA_HOSTS" ] || [ -z "$KAFKA_PORTS" ]; then
            log_message $FATAL "$LOG_FILE" "KAFKA_HOSTS or KAFKA_PORTS is not set."
            exit 1
        fi

        # Convert comma-separated Kafka hosts and ports into arrays
        IFS=',' read -r -a KAFKA_HOSTS_ARRAY <<< "$KAFKA_HOSTS"
        IFS=',' read -r -a KAFKA_PORTS_ARRAY <<< "$KAFKA_PORTS"

        # Check the status of Kafka instances
        SERVICE="Kafka"
        log_message $INFO "$LOG_FILE" "Checking Kafka services."
        for i in "${!KAFKA_HOSTS_ARRAY[@]}"; do
            if [ ${#KAFKA_PORTS_ARRAY[@]} -eq 1 ]; then
                port="${KAFKA_PORTS_ARRAY[0]}"
            else
                port="${KAFKA_PORTS_ARRAY[$i]}"
            fi
            if ! check_service_status "${KAFKA_HOSTS_ARRAY[$i]}" "$port" "$SERVICE"; then
                log_message $FATAL "$LOG_FILE" "One or more Kafka services are not running. Exiting with status 1."
                exit 1
            fi
        done
    else
        log_message $INFO "$LOG_FILE" "Kafka service check is disabled."
    fi
}

# Check the status of Kafka instances if properties are present
if [ "$KAFKA_PROPERTIES_PRESENT" = true ]; then
    if ! check_kafka_status; then
        exit 1
    fi
fi

# Log completion message
log_message $INFO "$LOG_FILE" "Service check completed successfully."
exit 0
