def get_pods_and_deployments(cluster, image, token):
    """Retrieve Pods and DeploymentConfigs across projects (namespaces) using the vulnerable image."""
    try:
        logging.info(f"Fetching pods and DeploymentConfigs using image: {image} in cluster: {cluster}")

        config.load_kube_config()
        k8s_client = client.ApiClient()
        dyn_client = DynamicClient(k8s_client)

        v1_pods = dyn_client.resources.get(api_version="v1", kind="Pod")
        v1_deployments = dyn_client.resources.get(api_version="apps.openshift.io/v1", kind="DeploymentConfig")
        v1_projects = dyn_client.resources.get(api_version="project.openshift.io/v1", kind="Project")  # Use Projects

        matched_pods, matched_deployments = [], []

        projects = v1_projects.get().items  # Fetch OpenShift Projects (Namespaces)

        # Extract only the image name (ignore registry URL)
        image_name = image.split("/")[-1]  # Converts "registry.com/repo/image:tag" -> "image:tag"

        for project in projects:
            namespace = project.metadata.name  # Extract namespace from Project
            pods = v1_pods.get(namespace=namespace).items
            deployments = v1_deployments.get(namespace=namespace).items

            for pod in pods:
                container_images = [c.image.split("/")[-1] for c in pod.spec.containers]  # Normalize container image

                if image_name in container_images:  # Match without registry URL
                    pod_info = {
                        "Cluster": cluster,
                        "Namespace": namespace,
                        "Pod": pod.metadata.name,
                        "Image": image
                    }
                    logging.info(json.dumps(pod_info, indent=2))  # Print pod details
                    matched_pods.append(pod_info)

            for deploy in deployments:
                container_images = [c.image.split("/")[-1] for c in deploy.spec.template.spec.containers]

                if image_name in container_images:  # Match without registry URL
                    deploy_info = {
                        "Cluster": cluster,
                        "Namespace": namespace,
                        "DeploymentConfig": deploy.metadata.name,
                        "Image": image
                    }
                    logging.info(json.dumps(deploy_info, indent=2))  # Print deployment details
                    matched_deployments.append(deploy_info)

        logging.info(f"Found {len(matched_pods)} Pods and {len(matched_deployments)} DeploymentConfigs using {image}.")
        return matched_pods, matched_deployments
    except Exception as e:
        logging.error(f"Error retrieving Pods and DeploymentConfigs: {e}")
        return [], []
