Flowchart: Manual Certificate Creation & Deployment Using Venafi TPP as CA in OpenShift

1Ô∏è‚É£ Access Venafi TPP

User logs into Venafi Trust Protection Platform (TPP) Web Console.

Navigate to "TLS Protect" ‚Üí "Certificates".

üîª Next Step: Create Certificate Request

2Ô∏è‚É£ Create Certificate Request

Click "Request a Certificate".

Fill in details:

Common Name (CN)

Subject Alternative Names (SANs)

Key Algorithm & Size

Certificate Policy Compliance

Select Venafi as the CA.

Click Submit Request.

üîª Next Step: Approval Process (If Required)

3Ô∏è‚É£ Approval Process (If Required)

If approval is required:

Admin/Security team reviews the request.

Validate domain compliance, key size, and policy adherence.

Click "Approve" to proceed.

If no approval is required, move to next step.

üîª Next Step: Venafi Issues the Certificate

4Ô∏è‚É£ Certificate Issuance by Venafi CA

Venafi TPP processes and issues the certificate.

The issued certificate is available for download.

üîª Next Step: Retrieve Certificate

5Ô∏è‚É£ Retrieve Issued Certificate from Venafi TPP

User downloads the certificate bundle:

Public Certificate (.crt/.pem)

Private Key (.key)

Intermediate CA Certificate (.crt)

üîª Next Step: Deploy Certificate in OpenShift

6Ô∏è‚É£ Deploy Certificate to OpenShift

üîπ Create OpenShift Secret for the Certificate

Copy the certificate files to OpenShift:

oc create secret tls my-tls-secret \
  --cert=example.com.crt \
  --key=example.com.key \
  -n my-namespace

üîπ Configure OpenShift Route with TLS

Modify OpenShift Route configuration:

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: my-app-route
  namespace: my-namespace
spec:
  host: example.com
  to:
    kind: Service
    name: my-app-service
  tls:
    termination: edge
    certificate: |-
      -----BEGIN CERTIFICATE-----
      ... (certificate content) ...
      -----END CERTIFICATE-----
    key: |-
      -----BEGIN PRIVATE KEY-----
      ... (private key content) ...
      -----END PRIVATE KEY-----
    caCertificate: |-
      -----BEGIN CERTIFICATE-----
      ... (CA certificate content) ...
      -----END CERTIFICATE-----

Apply the updated Route:

oc apply -f my-app-route.yaml

üîª Next Step: Restart & Verify

7Ô∏è‚É£ Restart Services & Verify Deployment

Restart OpenShift pods if necessary:

oc rollout restart deployment my-app -n my-namespace

Verify the HTTPS connection:

curl -v https://example.com

Check OpenShift logs for any errors.

Final Step: Certificate Successfully Deployed in OpenShift!





1Ô∏è‚É£ Certificate Request via Cert-Manager

Cert-Manager creates a CertificateRequest object.

The request includes details such as:

Common Name (CN) & Subject Alternative Names (SANs)

Key Algorithm & Size

Issuer Reference (Venafi TPP Issuer)

Validity Period

üîª Next Step: Cert-Manager Submits Request to Venafi

2Ô∏è‚É£ Cert-Manager Submits Request to Venafi TPP

Cert-Manager forwards the CertificateRequest to Venafi TPP.

Venafi verifies:

Request details compliance with security policies.

If an approval workflow is required.

üîª Next Step: Approval Process (If Required)

3Ô∏è‚É£ Approval Process in Venafi TPP (If Configured)

If approval is required:

Admin/Security Team reviews and approves/rejects the request.

Once approved, Venafi forwards the request to the configured CA.

üîª Next Step: Venafi Sends Request to CA

4Ô∏è‚É£ Venafi TPP Submits Request to Certificate Authority (CA)

Venafi acts as a broker and sends the request to:

Public CA (DigiCert, GlobalSign, etc.)

Private CA (Microsoft CA, AWS PCA, HashiCorp Vault, etc.)

The CA validates the request and issues the certificate.

üîª Next Step: Venafi Issues Certificate Back to Cert-Manager

5Ô∏è‚É£ Cert-Manager Receives Issued Certificate from Venafi

The issued certificate is stored as a Secret in Kubernetes.

The secret contains:

Public Certificate (.crt)

Private Key (.key)

CA Certificate (.crt)

üîª Next Step: Deploy Certificate to Workloads

6Ô∏è‚É£ Deploy Certificate to Kubernetes Ingress and Applications

üîπ Configure Kubernetes Ingress with TLS Secret

Reference the certificate secret in an Ingress resource:

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-ingress
  namespace: my-namespace
spec:
  tls:
  - hosts:
    - example.com
    secretName: my-tls-secret
  rules:
  - host: example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-service
            port:
              number: 443

Apply the Ingress configuration:

kubectl apply -f ingress.yaml

üîπ Deploy Certificate to OpenShift Routes (If Using OpenShift)

Create a Route with the certificate secret:

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: my-app-route
  namespace: my-namespace
spec:
  host: example.com
  to:
    kind: Service
    name: my-app-service
  tls:
    termination: edge
    key: |-
      -----BEGIN PRIVATE KEY-----
      ...
      -----END PRIVATE KEY-----
    certificate: |-
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    caCertificate: |-
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----

Apply the Route configuration:

oc apply -f route.yaml

üîª Next Step: Restart Services & Verify Deployment

7Ô∏è‚É£ Restart Services & Verify HTTPS Connection

Restart workloads if necessary:

kubectl rollout restart deployment my-app -n my-namespace

Verify HTTPS connectivity:

curl -v https://example.com

Check logs for potential certificate-related errors.

