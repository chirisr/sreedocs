Create a FastAPI endpoint (e.g., POST /create-cronjob) that:

Logs into the OpenShift cluster.

Creates or updates a CronJob in the specified namespace.

Returns success/failure response.

Requirements
Install dependencies:

bash

pip install fastapi uvicorn kubernetes openshift python-dotenv
File Structure
Example:

bash

project/
â”œâ”€â”€ main.py
â”œâ”€â”€ cronjob_util.py
â”œâ”€â”€ .kube/config       # or use service account inside cluster
cronjob_util.py â€“ OpenShift CronJob Create/Update Logic
python

from kubernetes import client, config
from openshift.dynamic import DynamicClient
import yaml

def get_k8s_client():
    # Use in-cluster config or kubeconfig
    config.load_kube_config()  # Or config.load_incluster_config()
    k8s_client = client.ApiClient()
    dyn_client = DynamicClient(k8s_client)
    return dyn_client

def create_or_update_cronjob(namespace: str, cronjob_yaml: str):
    dyn_client = get_k8s_client()
    v1_cronjobs = dyn_client.resources.get(api_version="batch/v1", kind="CronJob")

    cronjob_dict = yaml.safe_load(cronjob_yaml)
    name = cronjob_dict['metadata']['name']

    try:
        existing = v1_cronjobs.get(name=name, namespace=namespace)
        # Update existing
        response = v1_cronjobs.replace(body=cronjob_dict, name=name, namespace=namespace)
        return f"CronJob '{name}' updated", response.to_dict()
    except Exception as e:
        # Create new
        response = v1_cronjobs.create(body=cronjob_dict, namespace=namespace)
        return f"CronJob '{name}' created", response.to_dict()
ðŸš€ main.py â€“ FastAPI Endpoint
python

from fastapi import FastAPI, HTTPException, Body
from pydantic import BaseModel
from typing import Optional
from cronjob_util import create_or_update_cronjob

app = FastAPI()

class CronJobInput(BaseModel):
    namespace: str
    cronjob_yaml: str  # raw YAML as string (from UI, file, etc.)

@app.post("/create-cronjob")
def post_cronjob(data: CronJobInput):
    try:
        msg, result = create_or_update_cronjob(data.namespace, data.cronjob_yaml)
        return {"status": "success", "message": msg, "details": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
Sample cronjob_yaml Input (as string)
yaml

apiVersion: batch/v1
kind: CronJob
metadata:
  name: sample-cron
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox
            args:
            - /bin/sh
            - -c
            - date; echo Hello from the Kubernetes cluster
          restartPolicy: OnFailure
You can pass this YAML as string in the POST body.

Notes
Ensure your service account has RBAC to create/update CronJobs.

If running inside OpenShift, use config.load_incluster_config() and mount a ServiceAccount with necessary permissions.

You can validate YAML before loading using PyYAML.

Final Touches (Optional)
Support for DELETE /cronjob/{namespace}/{name}.

List all CronJobs with GET /cronjobs/{namespace}.

Add logging and security (token auth).
