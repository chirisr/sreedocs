When migrating from DeploymentConfig to Deployment in OpenShift, you need to modify multiple aspects of your configuration, including selectors, labels, strategies, and triggers. Below is a detailed breakdown of the necessary changes.

1. API Version & Kind
DeploymentConfig (Old)

yaml
Copy
Edit
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
Deployment (New)

yaml
Copy
Edit
apiVersion: apps/v1
kind: Deployment
Why? DeploymentConfig is an OpenShift-specific resource, while Deployment is a Kubernetes-native resource, using the apps/v1 API.
2. Selectors & Labels
DeploymentConfig (Old)

yaml
Copy
Edit
spec:
  selector:
    app: my-app
Deployment (New)

yaml
Copy
Edit
spec:
  selector:
    matchLabels:
      app: my-app
Why? Deployment uses matchLabels for selecting pods, whereas DeploymentConfig uses a simple selector field.
3. Strategy
DeploymentConfig (Old)

yaml
Copy
Edit
spec:
  strategy:
    type: Rolling
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
Deployment (New)

yaml
Copy
Edit
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
Why? In DeploymentConfig, rollingParams is used for rolling updates. In Deployment, it is directly defined inside rollingUpdate.
4. Triggers
DeploymentConfig (Old)

yaml
Copy
Edit
spec:
  triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - my-container
        from:
          kind: ImageStreamTag
          name: my-app:latest
Deployment (New)

ConfigChange trigger is automatic in Kubernetes Deployment.
ImageChange triggers are not natively supported, but you can use an external automation mechanism (CI/CD, ArgoCD, or OpenShift Pipelines).
If you want automatic image updates, you must handle it externally with kubectl set image or a GitOps pipeline.

5. Template Structure (Same in Both)
This part remains mostly unchanged, except for the required field modifications mentioned earlier.

yaml
Copy
Edit
template:
  metadata:
    labels:
      app: my-app
  spec:
    containers:
      - name: my-container
        image: my-image:latest
        ports:
          - containerPort: 8080
6. Replicas & Update Strategy
DeploymentConfig (Old)

yaml
Copy
Edit
spec:
  replicas: 2
Deployment (New)

yaml
Copy
Edit
spec:
  replicas: 2
  minReadySeconds: 5  # Ensures a pod runs for at least 5 seconds before being marked Ready
  progressDeadlineSeconds: 600  # Deadline for deployment completion
Why? Deployment provides minReadySeconds and progressDeadlineSeconds for finer control.
7. Status Field (No Changes Required)
Deployment and DeploymentConfig both use a similar status format, but Deployment uses conditions instead of OpenShift-specific fields.

Key Takeaways
Feature	DeploymentConfig (Old)	Deployment (New)
API Version	apps.openshift.io/v1	apps/v1
Kind	DeploymentConfig	Deployment
Selector	selector:	matchLabels:
Strategy	rollingParams	rollingUpdate
Triggers	ImageChange and ConfigChange	Handled externally (e.g., CI/CD)
Rolling Update	rollingParams	rollingUpdate
Replica Set Control	DeploymentConfig manages replicas	Deployment uses ReplicaSets
Image Handling	Uses ImageStreamTag	Needs external automation
