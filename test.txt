from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from fastapi.requests import Request
import requests
import json
import pandas as pd
import io
import urllib3
import logging
from kubernetes import client, config
from openshift.dynamic import DynamicClient
from ocploginconfiguration import ocploginconfiguration
from typing import Optional

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

app = FastAPI()

# Set up Jinja2 for templates
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

# Sample OpenShift Clusters (Modify as needed)
CLUSTERS = {
    "Cluster1": "https://api.cluster1.example.com",
    "Cluster2": "https://api.cluster2.example.com"
}

SCANPORTAL_API_BASE = "https://scanportal.example.com"

def get_openshift_token(username, password):
    """Retrieve OpenShift token using ocploginconfiguration."""
    try:
        logging.info("Retrieving OpenShift token...")
        token = ocploginconfiguration(ocp_username=username, ocp_password=password)
        if token:
            logging.info("OpenShift token retrieved successfully.")
            return token
        else:
            logging.error("Failed to retrieve OpenShift token.")
            return None
    except Exception as e:
        logging.error(f"Error retrieving OpenShift token: {e}")
        return None

def get_image_tags(registry, image_name, username, password):
    """Retrieve available tags for an image from the registry."""
    try:
        logging.info(f"Fetching image tags for {image_name} from {registry}...")
        auth = (username, password)
        url = f"https://{registry}/v2/{image_name}/tags/list"
        response = requests.get(url, auth=auth, verify=False)

        if response.status_code == 200:
            tags = response.json().get("tags", [])
            logging.info(f"Tags retrieved: {tags}")
            return tags
        else:
            logging.warning(f"Failed to retrieve tags. Status code: {response.status_code}")
            return []
    except Exception as e:
        logging.error(f"Error retrieving tags: {e}")
        return []

def start_scan(registry, image_name, tag, token):
    """Send scan request to ScanPortal."""
    image_reference = f"{image_name}:{tag}"
    scan_url = f"{SCANPORTAL_API_BASE}/v1/scan/reg/{registry}/image/{image_reference}/scan"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        logging.info(f"Starting scan for {image_reference}...")
        response = requests.post(scan_url, headers=headers, verify=False)

        if response.status_code == 200:
            scan_id = response.json().get("scan_id")
            logging.info(f"Scan started successfully. Scan ID: {scan_id}")
            return scan_id
        else:
            logging.warning(f"Scan request failed for {image_reference}. Status: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"Error starting scan for {image_reference}: {e}")
        return None

def get_scan_result(registry, image_name, tag, token):
    """Retrieve scan results from ScanPortal and determine vulnerability status."""
    image_reference = f"{image_name}:{tag}"
    results_url = f"{SCANPORTAL_API_BASE}/v1/scan/reg/{registry}/image/{image_reference}/scan"
    headers = {"Authorization": f"Bearer {token}"}

    try:
        logging.info(f"Fetching scan results for {image_reference}...")
        response = requests.get(results_url, headers=headers, verify=False)

        if response.status_code == 200:
            scan_data = response.json()
            svsc_data = scan_data.get("svsc", [])

            if not isinstance(svsc_data, list):
                logging.warning(f"Unexpected 'svsc' format for {image_reference}")
                return None  # Handle unexpected response format

            vulnerabilities = []

            for item in svsc_data:
                logging.info(f"Processing scan item: {json.dumps(item, indent=2)}")  # Log each scan item

                if "solution" in item and item["solution"].strip():  # Solution is not empty
                    vulnerabilities.append({"file": item["file"], "solution": item["solution"]})

            if vulnerabilities:
                logging.info(f"Image {image_reference} is vulnerable!")
                return vulnerabilities
            else:
                logging.info(f"Image {image_reference} is NOT vulnerable.")
                return None
        else:
            logging.warning(f"Failed to get scan results for {image_reference}. Status: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"Error retrieving scan results for {image_reference}: {e}")
        return None

def get_openshift_token(username, password):
    """Retrieve OpenShift token using ocploginconfiguration."""
    try:
        logging.info("Retrieving OpenShift token...")
        return ocploginconfiguration(ocp_username=username, ocp_password=password)
    except Exception as e:
        logging.error(f"Error retrieving OpenShift token: {e}")
        return None

def get_pods_and_deploymentconfigs(cluster, image, token):
    """Retrieve pods and DeploymentConfigs across all namespaces using the scanned image."""
    try:
        logging.info(f"Fetching pods and DeploymentConfigs using image: {image}")
        config.load_kube_config()
        k8s_client = client.ApiClient()
        dyn_client = DynamicClient(k8s_client)

        v1_pods = dyn_client.resources.get(api_version="v1", kind="Pod")
        v1_dc = dyn_client.resources.get(api_version="apps.openshift.io/v1", kind="DeploymentConfig")

        matched_pods, matched_dc = [], []

        for ns in dyn_client.resources.get(api_version="v1", kind="Namespace").get().items:
            namespace = ns.metadata.name
            pods = v1_pods.get(namespace=namespace).items
            dcs = v1_dc.get(namespace=namespace).items

            for pod in pods:
                if image in str(pod):
                    matched_pods.append(f"{namespace}/{pod.metadata.name}")

            for dc in dcs:
                if image in str(dc):
                    matched_dc.append(f"{namespace}/{dc.metadata.name}")

        logging.info(f"Found {len(matched_pods)} pods and {len(matched_dc)} DeploymentConfigs using {image}.")
        return matched_pods, matched_dc
    except Exception as e:
        logging.error(f"Error retrieving pods/DeploymentConfigs: {e}")
        return [], []

@app.post("/scan")
async def scan_image(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    cluster: str = Form(...),
    registry: str = Form(...),
    image_name: str = Form(...),
    tag: Optional[str] = Form(None)
):
    openshift_token = get_openshift_token(username, password)
    if not openshift_token:
        raise HTTPException(status_code=401, detail="Failed to retrieve OpenShift token")

    image_reference = f"{registry}/{image_name}:{tag}"
    
    pods, deployment_configs = get_pods_and_deploymentconfigs(cluster, image_reference, openshift_token)

    return {
        "image": image_reference,
        "pods": pods,
        "deployment_configs": deployment_configs
    }



<!DOCTYPE html>
<html>
<head>
    <title>Image Scan Portal</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <h1>Scan an Image</h1>
    <form action="/scan" method="post">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        Cluster: 
        <select name="cluster">
            {% for cluster, url in clusters.items() %}
                <option value="{{ url }}">{{ cluster }}</option>
            {% endfor %}
        </select><br>
        Registry: <input type="text" name="registry" required><br>
        Image Name: <input type="text" name="image_name" required><br>
        Image Tag (optional): <input type="text" name="tag"><br>
        <button type="submit">Scan</button>
    </form>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
    <title>Scan Results</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <h1>Scan Results</h1>
    <ul>
        {% for result in scan_results %}
            <li>{{ result.image }} - {{ result.status }}</li>
            {% if result.status == "Vulnerable" %}
                <ul>
                    {% for vuln in result.vulnerabilities %}
                        <li>{{ vuln.file }} - {{ vuln.solution }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        {% endfor %}
    </ul>
</body>
</html>





body {
    font-family: Arial, sans-serif;
    margin: 40px;
    padding: 20px;
    background-color: #f4f4f4;
}

h1 {
    color: #333;
}

form {
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0px 0px 10px #aaa;
    max-width: 400px;
}

input, select {
    width: 100%;
    padding: 8px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
}

button {
    background-color: #007bff;
    color: white;
    padding: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}
