1. Introduction

This document outlines the steps to integrate FastAPI with the ScanPortal API to scan images and remove them if found vulnerable. The process involves gathering API details, obtaining necessary access permissions, developing Python code for integration, and performing cleanup operations in OpenShift.

2. Steps for Integration

Step 1: Gather API Details from ScanPortal Team

Contact the ScanPortal team to obtain the necessary API details, including:

API base URL

Authentication method (API key, OAuth, etc.)

Required request headers and parameters

Response format and expected status codes

Any rate limits or restrictions

Step 2: Request Access for Service Account

Create a Jira ticket requesting access for a service account to connect with ScanPortal.

Include the following details in the ticket:

Purpose of access (image vulnerability scanning and cleanup)

Required API permissions

Associated OpenShift cluster details

Contact person for troubleshooting

Wait for approval and confirm access with the ScanPortal team.

Step 3: Develop Python Code for Integration

Implement a FastAPI-based solution to:

Connect to the ScanPortal API and scan images.

Parse the API response to check for vulnerabilities.

If vulnerable, connect to the OpenShift cluster and:

Stop running pods using the vulnerable image.

Delete the DeploymentConfig referencing the image.

Remove the vulnerable image from the registry.

Required Python Libraries

requests

json

pandas

io

urllib3.exceptions

kubernetes

openshift

FastAPI

Depends

HTTPException

UploadFile, File

typing.List

Pydantic.BaseModel, SecretStr

Step 4: Testing and Validation

Deploy the FastAPI service in a test OpenShift environment.

Test image scanning using ScanPortal API.

Validate the proper execution of OpenShift cleanup actions.

Log and handle any errors encountered.

Step 5: Documentation and Deployment

Document API endpoints, request and response formats.

Provide a guide on how to deploy and use the FastAPI service.

Ensure proper logging and monitoring mechanisms are in place.

3. Conclusion

Following these steps ensures a secure and automated approach to scanning and cleaning up vulnerable container images in OpenShift. The integration with ScanPortal API helps maintain compliance and security within the containerized environment.
