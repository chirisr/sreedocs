1. Introduction
This document outlines the detailed design for an OpenShift Image Scanning and Cleanup solution using FastAPI. The solution:

Provides a FastAPI-based UI for OpenShift image scanning.
Authenticates with OpenShift and Registry using a token.
Lists Pods and DeploymentConfigs using the provided image.
Uses ScanPortal APIs to determine if an image is vulnerable.
If vulnerable:
Deletes the image from the registry.
Stops all pods using the image.
Deletes associated DeploymentConfigs.
Implements logging, exception handling, and an image retention policy.
2. High-Level Architecture
Components
FastAPI Backend â€“ Handles UI inputs, OpenShift authentication, API calls, and cleanup logic.
ScanPortal API â€“ Used to scan images and determine vulnerability status.
OpenShift API â€“ Used to list pods, DeploymentConfigs, and delete resources.
Registry API â€“ Used to check if an image exists in the registry before scanning.
Technology Stack
FastAPI for backend API development.
Jinja2 for HTML template rendering.
Requests for API communication.
Kubernetes & OpenShift Python SDK for interacting with OpenShift.
Logging for debugging and execution tracking.
3. Flowchart
Flow Diagram for Image Scanning & Cleanup Process
plaintext
Copy
Edit
+------------------------------------------------+
| Start                                          |
+------------------------------------------------+
         |
         v
+--------------------------+
| User Inputs UI Details   |
| (Username, Cluster, etc) |
+--------------------------+
         |
         v
+--------------------------------------------+
| Authenticate with OpenShift & Registry     |
| (Using Token-Based Authentication)         |
+--------------------------------------------+
         |
         v
+---------------------------------------------------+
| Check if Image Exists in Registry                 |
|  - If Not Found â†’ Show "Image Not Found" Message  |
+---------------------------------------------------+
         |
         v
+---------------------------------------------+
| Fetch Image Tags (If No Tag Provided)       |
+---------------------------------------------+
         |
         v
+--------------------------------------+
| Loop Through Tags & Scan Each Image |
+--------------------------------------+
         |
         v
+---------------------------------------+
| Use ScanPortal APIs to Scan Image     |
| - If "solution" == "" â†’ Vulnerable    |
| - If "solution" != "" â†’ Not Vulnerable|
+---------------------------------------+
         |
         v
+--------------------------------------------------+
| List Pods & DeploymentConfigs using the Image   |
+--------------------------------------------------+
         |
         v
+--------------------------------------------------+
| If Image is Vulnerable:                          |
| - Stop Pods                                      |
| - Delete DeploymentConfigs                       |
| - Remove Image from Registry                     |
+--------------------------------------------------+
         |
         v
+---------------------------+
| Return Scan Results to UI |
+---------------------------+
         |
         v
+--------------------------------------+
| End Process - Show Results in UI    |
+--------------------------------------+
4. Detailed Component Design
4.1 FastAPI Backend
Endpoints:
/ â†’ Renders index.html for user input.
/scan (POST) â†’ Handles scanning logic.
Key Functions:
check_image_in_registry(): Checks if the image exists in the registry.
scan_image_with_scanportal(): Calls ScanPortal API to scan images.
find_pods_using_image(): Lists pods using the image.
find_deploymentconfigs_using_image(): Lists DeploymentConfigs using the image.
stop_pods(): Stops pods using the vulnerable image.
delete_deploymentconfigs(): Deletes DeploymentConfigs using the vulnerable image.
4.2 OpenShift API Integration
Uses OpenShift DynamicClient to interact with resources.
Retrieves Pods and DeploymentConfigs across all namespaces.
Uses OpenShift authentication via ocploginconfiguration.
4.3 ScanPortal API Integration
POST /scan â†’ Initiates image scan.
GET /scan/status â†’ Checks scan progress.
GET /scan/results â†’ Retrieves scan results.
Decision Logic:
If "solution": "" â†’ Image is Vulnerable.
If "solution" has a value â†’ Image is Not Vulnerable.
4.4 Registry API Integration
Checks if an image exists in the registry before scanning.
If the image is not found, the UI displays "Image Not Found".
4.5 Image Retention Policy
Some images should not be deleted (e.g., system-critical images).
The script maintains a list of protected images (IMAGE_RETENTION_LIST).
If an image is in this list, skip deletion.
5. Error Handling & Logging
5.1 Error Handling
OpenShift Authentication Errors
Error: Invalid credentials.
Action: Return 401 Unauthorized.
Registry Connectivity Issues
Error: Cannot reach the registry.
Action: Return 503 Service Unavailable.
ScanPortal API Errors
Error: Scan request failure.
Action: Log and retry.
Deletion Errors
Error: Failed to delete pods/DeploymentConfigs.
Action: Log error and continue.
5.2 Logging
Uses logging module to capture execution flow.
Logs:
Authentication attempts.
API requests & responses.
Identified pods/DeploymentConfigs.
ScanPortal scan status.
Vulnerable image deletions.
6. UI Design
6.1 index.html (Input Form)
Fields:
Username & Password
OpenShift Cluster (Dropdown)
Registry Name (Dropdown)
Image Name
Optional Image Tag
Submit Button â†’ Calls /scan API.
6.2 results.html (Scan Results)
Displays:
Image Scan Status
Pods & DeploymentConfigs using the image
Actions Taken (if vulnerable)
7. Conclusion
This design ensures:

Secure authentication with OpenShift & Registry.
Automated scanning of images using ScanPortal.
Automated cleanup for vulnerable images.
Logging & exception handling for reliability.
Would you like any modifications to the design or an additional feature? ðŸš€
