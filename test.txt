Design Document: Vulnerable Image Cleanup Process

1. Overview

This document outlines the process for identifying and removing vulnerable container images using both API-based and PowerShell-based scans. The process ensures thorough cleanup across multiple clusters, including stopping running pods, deleting DeploymentConfigs, and removing images from the registry.

2. Process Flow

2.1 API-Based Scan

Start – The process begins.

Authenticate with Scan Portal – Authentication is performed with the security scan portal.

Download CSV File – The user inputs a unique ID to retrieve a CSV report containing scan results.

Filter CSV for 'source=aqua' – The CSV file is filtered to extract records where the source is Aqua.

Extract Vulnerable Images – Vulnerable container images are identified from the filtered data.

2.2 PowerShell-Based Scan

Run PowerShell Script – A script is executed to perform the vulnerability scan.

Provide Scan Inputs – Necessary inputs for the scan are provided.

Generate HTML Report – The scan results are compiled into an HTML report.

Extract Vulnerable Images – Vulnerable container images are identified from the generated report.

2.3 Cleanup Process

Identify Affected Deployments – Deployments using the identified vulnerable images are determined.

Stop Running Pods – Running pods that use the vulnerable images are terminated.

Delete DeploymentConfigs – Associated DeploymentConfigs are removed to prevent further usage.

Remove Vulnerable Images from Registry – The vulnerable images are deleted from the image registry.

Cross-Cluster Cleanup? – If multiple clusters are involved, the process is repeated for each cluster.

Log and Audit Cleanup – All actions are logged for auditing and compliance purposes.

End – The process concludes.

3. Implementation Considerations

Authentication: Secure API authentication for retrieving scan results.

Automation: The process should be automated where possible to reduce manual intervention.

Cross-Cluster Execution: Ensure seamless execution across multiple OpenShift clusters.

Logging & Auditing: Maintain logs for tracking and compliance.

Error Handling: Implement robust error handling for failures in authentication, file processing, and API requests.

4. Conclusion

This design ensures a structured and automated approach to identifying and removing vulnerable images from OpenShift environments, making the cleanup process efficient and repeatable.

    A[Start] -->|API-Based Scan| B[Authenticate with Scan Portal]
    B --> C[Download CSV File (Input Unique ID)]
    C --> D[Filter CSV for 'source=aqua']
    D --> E[Extract Vulnerable Images]
    
    A -->|PowerShell Scan| F[Run PowerShell Script]
    F --> G[Provide Scan Inputs]
    G --> H[Generate HTML Report]
    H --> I[Extract Vulnerable Images]
    
    E & I --> J[Identify Affected Deployments]
    J --> K[Stop Running Pods]
    K --> L[Delete DeploymentConfigs]
    L --> M[Remove Vulnerable Images from Registry]
    M -->|Cross-Cluster Cleanup?| N[Repeat Process for Each Cluster]
    N --> O[Log and Audit Cleanup]
    O --> P[End]
