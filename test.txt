from fastapi import FastAPI, Form, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
import requests
from kubernetes import client, config

app = FastAPI()
templates = Jinja2Templates(directory="templates")

# Cluster-to-API mapping
CLUSTER_API_MAP = {
    "cluster1": "https://api.cluster1.openshift.example.com",
    "cluster2": "https://api.cluster2.openshift.example.com",
    "cluster3": "https://api.cluster3.openshift.example.com",
}

# ScanPortal API Endpoints (Replace with actual URLs)
SCANPORTAL_API_BASE = "https://scanportal.example.com/api"
POST_SCAN_URL = f"{SCANPORTAL_API_BASE}/post_scan"
GET_RESULTS_URL = f"{SCANPORTAL_API_BASE}/get_scan_results"

@app.get("/", response_class=HTMLResponse)
async def serve_ui(request: Request):
    return templates.TemplateResponse("index.html", {"request": request, "clusters": CLUSTER_API_MAP.keys()})

@app.post("/scan")
async def scan_image(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    cluster: str = Form(...),
    registry: str = Form(...),
    image_name: str = Form(...),
    tag: str = Form(None),
):
    openshift_api_base = CLUSTER_API_MAP.get(cluster)
    if not openshift_api_base:
        return {"error": "Invalid cluster selection."}

    token = get_openshift_token(username, password, openshift_api_base)
    if not token:
        return {"error": "Authentication failed."}

    images_to_scan = [f"{registry}/{image_name}:{tag}"] if tag else get_all_image_tags(registry, image_name)

    vulnerable_images = []
    
    for image in images_to_scan:
        scan_id = start_scan(image, token)
        if not scan_id:
            continue

        scan_result = get_scan_result(scan_id, token)
        if scan_result:
            vulnerable_images.append({"image": image, "vulnerabilities": scan_result})

    pods, deployment_configs = get_openshift_usage(cluster, token, [img["image"] for img in vulnerable_images])

    return templates.TemplateResponse(
        "results.html",
        {
            "request": request,
            "vulnerable_images": vulnerable_images,
            "pods": pods,
            "deployment_configs": deployment_configs,
        },
    )

def get_openshift_token(username, password, openshift_api_base):
    """Authenticate with OpenShift and retrieve a token."""
    auth_url = f"{openshift_api_base}/oauth/token"
    payload = {
        "grant_type": "password",
        "client_id": "openshift-challenging-client",
        "username": username,
        "password": password,
    }
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    
    response = requests.post(auth_url, data=payload, headers=headers, verify=False)
    if response.status_code == 200:
        return response.json().get("access_token")
    return None

def get_all_image_tags(registry, image_name):
    """Retrieve all available image tags from the registry"""
    return [f"{registry}/{image_name}:latest", f"{registry}/{image_name}:v1", f"{registry}/{image_name}:v2"]

def start_scan(image, token):
    """Send a request to ScanPortal to start the scan."""
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(POST_SCAN_URL, json={"image": image}, headers=headers)
    return response.json().get("scan_id") if response.status_code == 200 else None

def get_scan_result(scan_id, token):
    """Retrieve scan results from ScanPortal."""
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{GET_RESULTS_URL}/{scan_id}", headers=headers)
    
    if response.status_code == 200:
        scan_data = response.json()
        vulnerabilities = [
            {"file": item["file"], "solution": item["solution"]}
            for item in scan_data.get("svsc", []) if item["solution"]
        ]
        return vulnerabilities if vulnerabilities else None
    return None

def get_openshift_usage(cluster, token, images):
    """Connect to OpenShift and retrieve pods and deploymentconfigs using the specified images."""
    config.load_kube_config()  # Adjust for remote access if needed
    v1 = client.CoreV1Api()
    ocp_apps_v1 = client.AppsV1Api()

    pods = []
    deployment_configs = []

    for image in images:
        pod_list = v1.list_pod_for_all_namespaces(watch=False)
        for pod in pod_list.items:
            if image in str(pod.spec.containers):
                pods.append({"name": pod.metadata.name, "namespace": pod.metadata.namespace, "image": image})

        dep_list = ocp_apps_v1.list_deployment_config_for_all_namespaces(watch=False)
        for dep in dep_list.items:
            for container in dep.spec.template.spec.containers:
                if image in container.image:
                    deployment_configs.append({"name": dep.metadata.name, "namespace": dep.metadata.namespace, "image": image})

    return pods, deployment_configs









<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Scan Portal</title>
</head>
<body>
    <h2>Scan Image for Vulnerabilities</h2>
    <form action="/scan" method="post">
        <label>Username:</label>
        <input type="text" name="username" required><br>

        <label>Password:</label>
        <input type="password" name="password" required><br>

        <label>OpenShift Cluster:</label>
        <select name="cluster">
            {% for cluster in clusters %}
                <option value="{{ cluster }}">{{ cluster }}</option>
            {% endfor %}
        </select><br>

        <label>Registry Name:</label>
        <input type="text" name="registry" required><br>

        <label>Image Name:</label>
        <input type="text" name="image_name" required><br>

        <label>Tag (optional):</label>
        <input type="text" name="tag"><br>

        <button type="submit">Scan</button>
    </form>
</body>
</html>




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scan Results</title>
</head>
<body>
    <h2>Scan Results</h2>

    {% if vulnerable_images %}
        <h3>Vulnerable Images</h3>
        <table border="1">
            <tr>
                <th>Image</th>
                <th>File</th>
                <th>Solution</th>
            </tr>
            {% for img in vulnerable_images %}
                {% for vuln in img.vulnerabilities %}
                    <tr>
                        <td>{{ img.image }}</td>
                        <td>{{ vuln.file }}</td>
                        <td>{{ vuln.solution }}</td>
                    </tr>
                {% endfor %}
            {% endfor %}
        </table>
    {% else %}
        <p>No vulnerabilities found.</p>
    {% endif %}

    <h3>Affected OpenShift Pods</h3>
    <ul>
        {% for pod in pods %}
            <li>{{ pod.name }} (Namespace: {{ pod.namespace }}, Image: {{ pod.image }})</li>
        {% endfor %}
    </ul>

    <h3>Affected Deployments</h3>
    <ul>
        {% for dep in deployments %}
            <li>{{ dep.name }} (Namespace: {{ dep.namespace }}, Image: {{ dep.image }})</li>
        {% endfor %}
    </ul>

    <a href="/">Go Back</a>
</body>
</html>

