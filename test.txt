# app.py (FastAPI application with logging, OpenShift namespace aware, ocplogin and Artifactory AQL)
from fastapi import FastAPI, HTTPException, Query, Depends
from fastapi.openapi.models import SecurityRequirement, SecurityScheme
import datetime
import requests
import urllib3
from openshift.dynamic import DynamicClient
import os
import yaml
from kubernetes import config, client
import base64
import logging
import uvicorn
import subprocess
import json
from tabulate import tabulate
from dateutil import parser, tz
from typing import Optional, List, Dict, Any

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

app = FastAPI(
    # This is global security, and applies to every route.
    security=[SecurityRequirement(scheme="basicAuth")]
)

# Define security scheme for basic authentication
basic_auth_scheme = SecurityScheme(
    type="http",
    scheme="basic",
    description="Basic Authentication",
)

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ... (rest of your functions: get_namespace, load_config_from_configmap, load_secrets_from_secret, get_openshift_client, get_registry_token, execute_artifactory_aql_query_manifest_list)
def remove_image_tag_manifest(registry_url, image_name, tag, registry_token):
    """Removes an image tag, logging if the image is not found."""
    logger.info(f"Removing image tag {tag} for image {image_name} from registry {registry_url}")
    results = execute_artifactory_aql_query_manifest_list(f"https://{registry_url}", image_name.split('/')[0], '/'.join(image_name.split('/')[1:]), tag, registry_token)
    if results:
        artifactory_url = f"https://{registry_url}/artifactory/api/search/aql"
        headers = {"Authorization": f"Bearer {registry_token}", "Content-Type": "text/plain"}
        aql_query = f"""items.find({{"repo":"{image_name.split('/')[0]}","path":"{'/'.join(image_name.split('/')[1:])}","name":"{tag}"}})"""
        response = requests.post(artifactory_url, headers=headers, data=aql_query, verify=False)
        try:
            response.raise_for_status()
            results = response.json().get("results", [])
            if results:
                for result in results:
                    delete_url = f"https://{registry_url}/artifactory/{result['repo']}/{result['path']}/{result['name']}"
                    delete_response = requests.delete(delete_url, headers={"Authorization": f"Bearer {registry_token}"}, verify=False)
                    delete_response.raise_for_status()
                    logger.info(f"Removed image tag: {delete_url}")
            else:
                logger.warning(f"Image tag not found in Artifactory: {tag}")
                return {"image_tag_not_found": True, "message": f"Image tag {tag} not found in Artifactory."}
        except requests.exceptions.RequestException as e:
            logger.error(f"Error deleting image tag: {e}")
            raise HTTPException(status_code=500, detail=f"Error deleting image tag: {e}")

    else:
        logger.warning(f"Manifest list not found, skipping delete tag {tag}")
        return {"manifest_list_not_found": True, "message": f"Manifest list not found for tag {tag}."}
        

def get_pods(client, namespace) -> List[Dict[str, Any]]:
    """Retrieves all pods in a given namespace."""
    logger.info(f"Getting pods in namespace {namespace}")
    try:
        pods = client.resources.get(api_version='v1', kind='Pod').get(namespace=namespace).items
        if not pods:
            logger.warning(f"No pods found in namespace {namespace}.")
            return []
        return pods
    except Exception as e:
        logger.error(f"Error retrieving pods: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving pods: {e}")

def remove_pod(client, namespace, pod_name):
    """Removes a specific pod from a namespace."""
    logger.info(f"Removing pod {pod_name} from namespace {namespace}")
    try:
        client.resources.get(api_version='v1', kind='Pod').delete(namespace=namespace, name=pod_name)
        logger.info(f"Deleted pod {pod_name} in namespace {namespace}.")
    except Exception as e:
        logger.error(f"Error removing pod: {e}")
        raise HTTPException(status_code=500, detail=f"Error removing pod: {e}")

def get_deployment_configs(client, namespace) -> List[Dict[str, Any]]:
    """Retrieves all deployment configurations in a given namespace."""
    logger.info(f"Getting deployment configs in namespace {namespace}")
    try:
        deployment_configs = client.resources.get(api_version='apps.openshift.io/v1', kind='DeploymentConfig').get(namespace=namespace).items
        if not deployment_configs:
            logger.warning(f"No deployment configs found in namespace {namespace}.")
            return []
        return deployment_configs
    except Exception as e:
        logger.error(f"Error retrieving deployment configs: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving deployment configs: {e}")

def remove_deployment_config(client, namespace, deployment_config_name):
    """Removes a specific deployment configuration from a namespace."""
    logger.info(f"Removing deployment config {deployment_config_name} from namespace {namespace}")
    try:
        client.resources.get(api_version='apps.openshift.io/v1', kind='DeploymentConfig').delete(namespace=namespace, name=pod_name)
        logger.info(f"Deleted pod {pod_name} in namespace {namespace}.")
    except Exception as e:
        logger.error(f"Error removing pod: {e}")
        raise HTTPException(status_code=500, detail=f"Error removing pod: {e}")

def get_image_digests_with_creation_dates(registry_url, image_name, registry_token, tag_name: Optional[str] = None) -> Dict[str, Optional[datetime.datetime]]:
    """
    Retrieves image digests and their creation dates from the registry.

    Args:
        registry_url (str): The URL of the container registry.
        image_name (str): The name of the image.
        registry_token (str): The authentication token for the registry.
        tag_name (Optional[str], optional):  The tag name. Defaults to None.

    Returns:
        Dict[str, Optional[datetime.datetime]]: A dictionary where keys are image tags
                                                and values are  dictionaries containing creation dates and image identifiers.
    """
    logger.info(f"Getting image digests with creation dates for {image_name}:{tag_name} from {registry_url}")
    try:
        registry_api_url = f"https://{registry_url}/v2/{image_name}/tags/list"
        headers = {"Authorization": f"Bearer {registry_token}"}
        response = requests.get(registry_api_url, headers=headers, verify=False)
        response.raise_for_status()
        tags_list = response.json().get("tags", [])
        if tag_name and tag_name not in tags_list:
            logger.warning(f"Image with tag {tag_name} not found.")
            return {}

        tags_with_data = {}
        image_found = False
        for tag in tags_list:
            if tag_name and tag != tag_name:
                continue

            manifest_api_url = f"https://{registry_url}/v2/{image_name}/manifests/{tag}"
            manifest_response = requests.get(manifest_api_url, headers={"Accept": "application/vnd.docker.distribution.manifest.v2+json", "Authorization": f"Bearer {registry_token}"}, verify=False)
            manifest_response.raise_for_status()
            manifest = manifest_response.json()
            if "config" in manifest and "digest" in manifest["config"]:
                image_identifier = manifest["config"]["digest"]
                creation_date = get_image_creation_date(registry_url, image_name, tag, registry_token)
                if creation_date:
                    tags_with_data[tag] = { "image_identifier": image_identifier, "creation_date": creation_date} # Changed
                    image_found = True
                else:
                    logger.warning(f"Failed to retrieve creation date for image: {image_name}:{tag}")
            else:
                logger.warning(f"Image config or digest not found in manifest for {image_name}:{tag}")
        
        if not image_found:
            logger.warning(f"No images found for {image_name} with tag {tag_name}.")
            return {}

        return tags_with_data # Changed

    except requests.exceptions.RequestException as e:
        logger.error(f"Error retrieving image digests and creation dates: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving image digests and creation dates: {e}")

def get_image_creation_date(registry_url, image_name, tag, registry_token):
    """Retrieves the creation date of an image from the registry."""
    logger.info(f"Getting creation date for {image_name}:{tag} from {registry_url}")
    try:
        manifest_api_url = f"https://{registry_url}/v2/{image_name}/manifests/{tag}"
        manifest_response = requests.get(manifest_api_url, headers={"Accept": "application/vnd.docker.distribution.manifest.v2+json", "Authorization": f"Bearer {registry_token}"}, verify=False)
        manifest_response.raise_for_status()
        manifest = manifest_response.json()
        image_identifier = manifest["config"]["digest"]

        config_api_url = f"https://{registry_url}/v2/{image_name}/blobs/{image_identifier}"
        response = requests.get(config_api_url, headers={"Authorization": f"Bearer {registry_token}"}, verify=False)
        response.raise_for_status()
        config = response.json()
        created_str = config.get("config", {}).get("Created")

        if created_str and created_str.strip():
            try:
                creation_date = parser.isoparse(created_str)
                return creation_date
            except ValueError:
                logger.warning(f"Invalid ISO format for creation date: {created_str} for {registry_url}/{image_name}/{tag}")
                return None
        else:
            logger.warning(f"Creation date not found for {registry_url}/{image_name}/{tag}")
            return None

    except requests.exceptions.RequestException as e:
        logger.error(f"Error retrieving image creation date: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving image creation date: {e}")

def get_available_repositories():
    """
    Retrieves a list of available repositories from the OpenShift environment.
    This is a placeholder and needs to be implemented based on your OpenShift setup.
    """
    namespace = get_namespace()
    try:
        # Use the OpenShift client to get the list of ImageStreams.  This might need adjustment.
        dyn_client = get_openshift_client()
        image_streams = dyn_client.resources.get(api_version='image.openshift.io/v1', kind='ImageStream').get(namespace=namespace)
        # Extract the names of the repositories from the ImageStreams
        repositories = [item.metadata.name for item in image_streams.items]
        if not repositories:
            logger.warning(f"No ImageStreams found in namespace {namespace}.")
            return ["myregistry.com/my-image"] # Default
        return repositories
    except Exception as e:
        logger.error(f"Error retrieving repositories: {e}")
        #  Handle the error appropriately.  For example, return a default list or raise an exception.
        return ["myregistry.com/my-image"]  # Return a default list.



@app.get("/list-stale-images/")
async def list_stale_images(
    repository_url: str = Query(..., description="URL of the image repository"),
    image_name: str = Query(..., description="Name of the image to clean (e.g., 'my-app/my-image')"),
    tag_name: Optional[str] = Query(None, description="Optional tag name to clean"),
    remove_older_than: int = Query(30, description="Remove images older than this many days"),
    filter_namespace: Optional[str] = Query(None, description="Filter resources by namespace"),
):
    """
    Lists stale images, pods, and deployment configs in the specified image repository within an OpenShift environment.
    """
    namespace = get_namespace()
    config_map_name = os.getenv("CONFIGMAP_NAME", "registry-cleaner-config")
    secret_name = os.getenv("SECRET_NAME", "registry-cleaner-secret")

    logger.info(f"Listing stale images. Tag name: {tag_name}")

    config_data = load_config_from_configmap(namespace, config_map_name)
    secret_data = load_secrets_from_secret(namespace, secret_name)

    client = get_openshift_client()

    all_stale_images = {}
    deployment_configs_to_delete = []
    pods_to_delete = []

    registry_token = get_registry_token(repository_url)
    tags_with_data = get_image_digests_with_creation_dates(repository_url, image_name, registry_token, tag_name) # Changed

    stale_images = {}
    cutoff_date = datetime.datetime.now(tz.UTC) - datetime.timedelta(days=remove_older_than)

    for tag, data in tags_with_data.items(): # Changed
        creation_date = data["creation_date"]
        if creation_date < cutoff_date:
            stale_images[data["image_identifier"]] = tag

    all_stale_images.update(stale_images)

    namespaces_to_check = [namespace]  # Start with the current namespace
    if filter_namespace:
        if filter_namespace != namespace:
            namespaces_to_check.append(filter_namespace)  # Add filter_namespace if it's different

    for ns in namespaces_to_check:
        deployment_configs = get_deployment_configs(client, ns)
        if not deployment_configs:
            logger.warning(f"No DeploymentConfigs found in namespace {ns} during deletion check.")
        else:
            for deployment_config in deployment_configs:
                deployment_config_namespace = deployment_config.metadata.namespace
                if filter_namespace and deployment_config_namespace != filter_namespace:
                    logger.info(f"Skipping DeploymentConfig {deployment_config.metadata.name} in namespace {deployment_config_namespace} as it does not match filter {filter_namespace}.")
                    continue
                deployment_config_name = deployment_config.metadata.name
                containers = deployment_config.spec.template.spec.containers
                for container in containers:
                    image = container.image
                    for image_identifier, tag in stale_images.items():
                        if image_identifier in image: # changed
                            deployment_configs_to_delete.append([deployment_config_namespace, deployment_config_name])

        pods = get_pods(client, ns)
        if not pods:
            logger.warning(f"No Pods found in namespace {ns} during deletion check.")
        else:
            for pod in pods:
                pod_namespace = pod.metadata.namespace
                if filter_namespace and pod_namespace != filter_namespace:
                    logger.info(f"Skipping Pod {pod.metadata.name} in namespace {pod_namespace} as it does not match filter {filter_namespace}.")
                    continue
                pod_name = pod.metadata.name
                containers = pod.spec.containers
                for container in containers:
                    image = container.image
                    for image_identifier, tag in stale_images.items():
                         if image_identifier in image: # changed
                            pods_to_delete.append([pod_namespace, pod_name])

    image_table = []
    for image_identifier, tag in all_stale_images.items():
        image_table.append([f"{repository_url}/{image_name}:{tag}", tag])

    image_table_formatted = tabulate(image_table, headers=["Image", "Tag"], tablefmt="grid")
    deployment_configs_table_formatted = tabulate(deployment_configs_to_delete, headers=["DeploymentConfig Namespace", "DeploymentConfig Name"], tablefmt="grid")
    pods_table_formatted = tabulate(pods_to_delete, headers=["Pod Namespace", "Pod Name"], tablefmt="grid")
    return {
        "stale_images": image_table_formatted,
        "deployment_configs_to_delete": deployment_configs_table_formatted,
        "pods_to_delete": pods_table_formatted,
        "message": "Stale images, related DeploymentConfigs, and Pods found."
    }



@app.delete("/delete-stale-images/")
async def delete_stale_images(
    repository_url: str = Query(..., description="URL of the image repository"),
    image_name: str = Query(..., description="Name of the image to clean (e.g., 'my-app/my-image')"),
    tag_name: Optional[str] = Query(None, description="Optional tag name to clean"),
    remove_older_than: int = Query(30, description="Remove images older than this many days"),
    filter_namespace: Optional[str] = Query(None, description="Filter resources by namespace"),
    delete_operation: bool = Query(True, description="Enable deletion of images, pods, and deployment configs"),
):
    """
    Deletes stale images, pods, and deployment configs in the specified image repository within an OpenShift environment.
    """
    namespace = get_namespace()
    config_map_name = os.getenv("CONFIGMAP_NAME", "registry-cleaner-config")
    secret_name = os.getenv("SECRET_NAME", "registry-cleaner-secret")

    logger.info(f"Deleting stale images, pods, and deployment configs. Tag name: {tag_name}, Delete operation: {delete_operation}")

    config_data = load_config_from_configmap(namespace, config_map_name)
    secret_data = load_secrets_from_secret(namespace, secret_name)

    client = get_openshift_client()

    all_stale_images = {}
    all_deleted_images = []
    all_deployment_configs_to_delete = []
    all_pods_to_delete = []

    registry_token = get_registry_token(repository_url)
    tags_with_data = get_image_digests_with_creation_dates(repository_url, image_name, registry_token, tag_name) # Changed

    stale_images = {}
    cutoff_date = datetime.datetime.now(tz.UTC) - datetime.timedelta(days=remove_older_than)

    for tag, data in tags_with_data.items(): # Changed
        creation_date = data["creation_date"]
        if creation_date < cutoff_date:
            stale_images[data["image_identifier"]] = tag # Changed

    all_stale_images.update(stale_images)
    
    namespaces_to_check = [namespace]  # Start with the current namespace
    if filter_namespace:
        if filter_namespace != namespace:
            namespaces_to_check.append(filter_namespace)  # Add filter_namespace if it's different

    deployment_configs_to_delete = []
    pods_to_delete = []
    
    if stale_images and delete_deployments:
        for ns in namespaces_to_check: # Iterate Namespaces
            deployment_configs = get_deployment_configs(client, ns)
            if not deployment_configs:
                logger.warning(f"No DeploymentConfigs found in namespace {ns} during deletion check.")
                return {
                    "deployment_configs_not_found": True,
                    "message": f"No DeploymentConfigs found in namespace {ns}."
                }
            else:
                for deployment_config in deployment_configs:
                    deployment_config_namespace = deployment_config.metadata.namespace
                    if filter_namespace and deployment_config_namespace != filter_namespace:
                        logger.info(f"Skipping DeploymentConfig {deployment_config.metadata.name} in namespace {deployment_config_namespace} as it does not match filter {filter_namespace}.")
                        continue
                    deployment_config_name = deployment_config.metadata.name
                    containers = deployment_config.spec.template.spec.containers
                    for container in containers:
                        image = container.image
                        for image_identifier, tag in stale_images.items():
                            if image_identifier in image: # Changed
                                deployment_configs_to_delete.append([deployment_config_namespace, deployment_config_name])

            pods = get_pods(client, ns)
            if not pods:
                logger.warning(f"No Pods found in namespace {ns} during deletion check.")
                return {
                    "pods_not_found": True,
                    "message": f"No Pods found in namespace {ns}."
                }
            else:
                for pod in pods:
                    pod_namespace = pod.metadata.namespace
                    if filter_namespace and pod_namespace != filter_namespace:
                        logger.info(f"Skipping Pod {pod.metadata.name} in namespace {pod_namespace} as it does not match filter {filter_namespace}.")
                        continue
                    pod_name = pod.metadata.name
                    containers = pod.spec.containers
                    for container in containers:
                        image = container.image
                        for image_identifier, tag in stale_images.items():
                            if image_identifier in image: # Changed
                                pods_to_delete.append([pod_namespace, pod_name])
        
        all_deployment_configs_to_delete.extend(deployment_configs_to_delete)
        all_pods_to_delete.extend(pods_to_delete)

        deleted_images = []
        deleted_deployment_configs = []
        deleted_pods = []
        
        if delete_operation: # this if check is still needed
            for image_identifier, tag in stale_images.items():
                results = execute_artifactory_aql_query_manifest_list(f"https://{repository_url}", image_name.split('/')[0], '/'.join(image_name.split('/')[1:]), tag, registry_token)
                if results:
                    remove_image_tag_manifest(repository_url, image_name, tag, registry_token)
                    deleted_images.append([f"{repository_url}/{image_name}:{tag}", tag])
                    logger.info(f"Deleted image {repository_url}/{image_name}:{tag}")
                else:
                    log_message = f"Image {repository_url}/{image_name}:{tag} does not exist. Skipping deletion."
                    logger.warning(log_message)
                    return {
                        "image_not_found": True,
                        "image_not_found_message": log_message
                    }
            all_deleted_images.extend(deleted_images)

            for deployment_config_namespace, deployment_config_name in deployment_configs_to_delete:
                try:
                    remove_deployment_config(client, deployment_config_namespace, deployment_config_name)
                    deleted_deployment_configs.append([deployment_config_namespace, deployment_config_name])
                except HTTPException as e:
                    if "Not Found" in e.detail:
                        log_message = f"DeploymentConfig {deployment_config_name} in namespace {deployment_config_namespace} not found. Skipping deletion."
                        logger.warning(log_message)
                        return {
                            "deployment_config_not_found": True,
                            "deployment_config_not_found_message": log_message
                        }
                    else:
                        raise

            for item in pods_to_delete:
                if isinstance(item, (tuple, list)) and len(item) == 2:
                    pod_namespace, pod_name = item
                    try:
                        remove_pod(client, pod_namespace, pod_name)
                        deleted_pods.append([pod_namespace, pod_name])
                        logger.info(f"Deleted pod {pod_name} in namespace {pod_namespace}.")
                    except HTTPException as e:
                        if "Not Found" in e.detail:
                            log_message = f"Pod {pod_name} in namespace {pod_namespace} not found. Skipping deletion."
                            logger.warning(log_message)
                            return {
                                "pod_not_found": True,
                                "pod_not_found_message": log_message
                            }
                        else:
                            raise
                else:
                    logger.warning(f"Invalid item in pods_to_delete: {item}")
            
            all_deleted_images.extend(deleted_images)
            all_deleted_deployment_configs.extend(deleted_deployment_configs)
            all_deleted_pods.extend(deleted_pods)
    
    

    logger.info("Registry cleaning process completed with deletion.")

    image_table_formatted = tabulate(all_deleted_images, headers=["Deleted Image", "Tag"], tablefmt="grid")
    deployment_configs_table_formatted = tabulate(all_deleted_deployment_configs, headers=["Deleted DeploymentConfig Namespace", "Deleted DeploymentConfig"], tablefmt="grid")
    pods_table_formatted = tabulate(all_deleted_pods, headers=["Deleted Pod Namespace", "Deleted Pod Name"], tablefmt="grid")
    return {
        "deleted_stale_images": image_table_formatted,
        "deleted_deployment_configs": deployment_configs_table_formatted,
        "deleted_pods": pods_table_formatted,
        "message": "Registry cleaning process completed with deletion."
    }

def main():
    uvicorn.run("app:app", host="0.0.0.0", port=8000)

if __name__ == "__main__":
    main()
