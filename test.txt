from fastapi import FastAPI, Form, Depends, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from fastapi.requests import Request
import requests
import json
import urllib3
import logging
from kubernetes import client, config
from openshift.dynamic import DynamicClient
from ocploginconfiguration import ocploginconfiguration
from typing import Optional

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

app = FastAPI()

# Set up Jinja2 for templates
templates = Jinja2Templates(directory="templates")

# Mount static folder for CSS and other assets
app.mount("/static", StaticFiles(directory="static"), name="static")

# Sample OpenShift Clusters
CLUSTERS = {
    "Cluster1": "https://api.cluster1.example.com",
    "Cluster2": "https://api.cluster2.example.com"
}

SCANPORTAL_API_BASE = "https://scanportal.example.com"

@app.get("/", response_class=HTMLResponse)
async def render_index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request, "clusters": CLUSTERS})

def get_openshift_token(username, password):
    """Retrieve OpenShift token using ocploginconfiguration."""
    try:
        logging.info("Retrieving OpenShift token...")
        return ocploginconfiguration(ocp_username=username, ocp_password=password)
    except Exception as e:
        logging.error(f"Error retrieving OpenShift token: {e}")
        return None

def get_image_tags(registry, image_name, username, password):
    """Retrieve available tags for an image from the registry."""
    try:
        url = f"https://{registry}/v2/{image_name}/tags/list"
        response = requests.get(url, auth=(username, password), verify=False)
        return response.json().get("tags", []) if response.status_code == 200 else []
    except Exception as e:
        logging.error(f"Error retrieving tags: {e}")
        return []

def start_scan(registry, image_name, tag, token):
    """Send scan request to ScanPortal."""
    url = f"{SCANPORTAL_API_BASE}/v1/scan/reg/{registry}/image/{image_name}:{tag}/scan"
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.post(url, headers=headers, verify=False)
        return response.json().get("scan_id") if response.status_code == 200 else None
    except Exception as e:
        logging.error(f"Error starting scan: {e}")
        return None

def get_scan_result(registry, image_name, tag, token):
    """Retrieve scan results from ScanPortal."""
    url = f"{SCANPORTAL_API_BASE}/v1/scan/reg/{registry}/image/{image_name}:{tag}/scan"
    headers = {"Authorization": f"Bearer {token}"}

    try:
        response = requests.get(url, headers=headers, verify=False)
        if response.status_code != 200:
            return None

        scan_data = response.json()
        vulnerabilities = [
            {"file": item["file"], "solution": item["solution"]}
            for item in scan_data.get("svsc", []) if item.get("solution", "").strip()
        ]
        return vulnerabilities if vulnerabilities else None
    except Exception as e:
        logging.error(f"Error retrieving scan results: {e}")
        return None

@app.post("/scan")
async def scan_image(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    cluster: str = Form(...),
    registry: str = Form(...),
    image_name: str = Form(...),
    tag: Optional[str] = Form(None)
):
    openshift_token = get_openshift_token(username, password)
    if not openshift_token:
        raise HTTPException(status_code=401, detail="Failed to retrieve OpenShift token")

    tags = [tag] if tag else get_image_tags(registry, image_name, username, password)
    if not tags:
        raise HTTPException(status_code=400, detail="No image tags found")

    scan_results = []
    for tag in tags:
        scan_id = start_scan(registry, image_name, tag, openshift_token)
        vulnerabilities = get_scan_result(registry, image_name, tag, openshift_token)
        status = "Vulnerable" if vulnerabilities else "Not Vulnerable"
        scan_results.append({"image": f"{registry}/{image_name}:{tag}", "status": status, "vulnerabilities": vulnerabilities})

    return templates.TemplateResponse("results.html", {
        "request": request,
        "scan_results": scan_results
    })



<!DOCTYPE html>
<html>
<head>
    <title>Image Scan Portal</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <h1>Scan an Image</h1>
    <form action="/scan" method="post">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        Cluster: 
        <select name="cluster">
            {% for cluster, url in clusters.items() %}
                <option value="{{ url }}">{{ cluster }}</option>
            {% endfor %}
        </select><br>
        Registry: <input type="text" name="registry" required><br>
        Image Name: <input type="text" name="image_name" required><br>
        Image Tag (optional): <input type="text" name="tag"><br>
        <button type="submit">Scan</button>
    </form>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
    <title>Scan Results</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <h1>Scan Results</h1>
    <ul>
        {% for result in scan_results %}
            <li>{{ result.image }} - {{ result.status }}</li>
            {% if result.status == "Vulnerable" %}
                <ul>
                    {% for vuln in result.vulnerabilities %}
                        <li>{{ vuln.file }} - {{ vuln.solution }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        {% endfor %}
    </ul>
</body>
</html>





body {
    font-family: Arial, sans-serif;
    margin: 40px;
    padding: 20px;
    background-color: #f4f4f4;
}

h1 {
    color: #333;
}

form {
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0px 0px 10px #aaa;
    max-width: 400px;
}

input, select {
    width: 100%;
    padding: 8px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
}

button {
    background-color: #007bff;
    color: white;
    padding: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}
