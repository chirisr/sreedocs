from fastapi import FastAPI, UploadFile, File, Body, HTTPException
from fastapi.responses import JSONResponse, StreamingResponse
from apscheduler.schedulers.background import BackgroundScheduler
import requests
import pandas as pd
import io

app = FastAPI()

scheduler = BackgroundScheduler()
scheduler.start()


@app.get("/stale-images")
async def get_stale_images(format: str = "json"):
    # Dummy stale images (replace with registry/openshift logic)
    data = {
        "vulnerable_image": {
            "stale_imagescount": 3,
            "stale_images": [
                {"registry": "myregistry.com", "image": "app1", "tag": "v1.0"},
                {"registry": "myregistry.com", "image": "app2", "tag": "v2.3"},
                {"registry": "myregistry.com", "image": "app3", "tag": "latest"}
            ]
        }
    }

    if format == "json":
        return JSONResponse(content=data)

    elif format == "csv":
        df = pd.DataFrame(data["vulnerable_image"]["stale_images"])
        df["older_images"] = True
        stream = io.StringIO()
        df.to_csv(stream, index=False)
        response = StreamingResponse(iter([stream.getvalue()]), media_type="text/csv")
        response.headers["Content-Disposition"] = "attachment; filename=stale_images.csv"
        return response


@app.post("/delete-stale-images")
async def delete_stale_images(
    file: UploadFile = None,
    json_body: dict = Body(None)
):
    df = None

    if file:
        df = pd.read_csv(file.file)

    elif json_body:
        stale_images_list = json_body.get("vulnerable_image", {}).get("stale_images", [])
        df = pd.DataFrame(stale_images_list)
        df["older_images"] = True

    else:
        raise HTTPException(status_code=400, detail="Provide either CSV file or JSON body")

    deleted = []
    for _, row in df.iterrows():
        if row.get("older_images", True):
            deleted.append(f"{row['registry']}/{row['image']}:{row['tag']}")

    return {"deleted_images": deleted}


# --- Scheduler job ---
def scheduled_cleanup(format: str = "json"):
    try:
        # 1. Always fetch new data from GET API
        resp = requests.get("http://localhost:8000/stale-images", params={"format": format})
        resp.raise_for_status()

        if format == "json":
            data = resp.json()
            # Directly call delete API with JSON body
            del_resp = requests.post(
                "http://localhost:8000/delete-stale-images",
                json=data
            )
        else:  # CSV case
            del_resp = requests.post(
                "http://localhost:8000/delete-stale-images",
                files={"file": ("stale_images.csv", resp.text, "text/csv")}
            )

        del_resp.raise_for_status()
        print("Scheduler Cleanup Done:", del_resp.json())

    except Exception as e:
        print("Scheduler Error:", str(e))


@app.post("/schedule-cleanup")
async def schedule_cleanup(interval_minutes: int = 5, format: str = "json"):
    job = scheduler.add_job(
        scheduled_cleanup,
        "interval",
        minutes=interval_minutes,
        args=[format],
        id="stale_cleanup_job",
        replace_existing=True
    )
    return {"message": f"Cleanup job scheduled every {interval_minutes} minutes", "job_id": job.id}
