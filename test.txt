# app.py (FastAPI application with logging)
from fastapi import FastAPI, HTTPException
import datetime
import requests
import urllib3
from openshift.dynamic import DynamicClient
import os
import yaml
from kubernetes import config, client
import base64
import logging
import uvicorn

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

app = FastAPI()

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def load_config_from_configmap(namespace, configmap_name):
    config.load_incluster_config()
    v1 = client.CoreV1Api()
    try:
        configmap = v1.read_namespaced_config_map(configmap_name, namespace)
        return yaml.safe_load(configmap.data["config.yaml"])
    except client.exceptions.ApiException as e:
        logger.error(f"Error loading ConfigMap: {e}")
        raise HTTPException(status_code=500, detail=f"Error loading ConfigMap: {e}")

def load_secrets_from_secret(namespace, secret_name):
    config.load_incluster_config()
    v1 = client.CoreV1Api()
    try:
        secret = v1.read_namespaced_secret(secret_name, namespace)
        return {k: base64.b64decode(v).decode('utf-8') for k, v in secret.data.items()}
    except client.exceptions.ApiException as e:
        logger.error(f"Error loading Secret: {e}")
        raise HTTPException(status_code=500, detail=f"Error loading Secret: {e}")

def get_openshift_client(api_url, username, password):
    try:
        token_response = requests.post(
            f"{api_url}/oauth/token",
            data={"grant_type": "password", "username": username, "password": password, "client_id": "openshift-challenging-client"},
            verify=False,
        )
        token_response.raise_for_status()
        token = token_response.json()["access_token"]

        k8s_client = DynamicClient(
            client=requests.Session(),
            url=api_url,
            token=token,
            verify=False,
        )
        return k8s_client
    except requests.exceptions.RequestException as e:
        logger.error(f"Error getting OpenShift token: {e}")
        raise HTTPException(status_code=500, detail=f"Error getting OpenShift token: {e}")

def get_image_tags(client, registry_url, image_name):
    try:
        registry_api_url = f"https://{registry_url}/v2/{image_name}/tags/list"
        response = client.client.get(registry_api_url)
        response.raise_for_status()
        return response.json().get("tags", [])
    except requests.exceptions.RequestException as e:
        logger.error(f"Error retrieving image tags: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving image tags: {e}")

def get_image_creation_date(client, registry_url, image_name, tag):
    try:
        manifest_api_url = f"https://{registry_url}/v2/{image_name}/manifests/{tag}"
        response = client.client.get(manifest_api_url, headers={"Accept": "application/vnd.docker.distribution.manifest.v2+json"})
        response.raise_for_status()
        manifest = response.json()
        config_digest = manifest["config"]["digest"]
        config_api_url = f"https://{registry_url}/v2/{image_name}/blobs/{config_digest}"
        response = client.client.get(config_api_url)
        response.raise_for_status()
        config = response.json()
        created_str = config["config"]["Created"]
        return datetime.datetime.fromisoformat(created_str.replace("Z", "+00:00"))
    except requests.exceptions.RequestException as e:
        logger.error(f"Error retrieving image creation date: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving image creation date: {e}")

def remove_image_tag(client, registry_url, image_name, tag):
    try:
        manifest_api_url = f"https://{registry_url}/v2/{image_name}/manifests/{tag}"
        client.client.delete(manifest_api_url)
        logger.info(f"Removed image: {registry_url}/{image_name}:{tag}")
    except requests.exceptions.RequestException as e:
        logger.error(f"Error removing image tag: {e}")
        raise HTTPException(status_code=500, detail=f"Error removing image tag: {e}")

def get_deployments(client):
    try:
        deployments = client.resources.get(api_version='apps/v1', kind='Deployment').get()
        return deployments.items
    except Exception as e:
        logger.error(f"Error retrieving deployments: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving deployments: {e}")

def remove_deployment(client, namespace, deployment_name):
    try:
        client.resources.get(api_version='apps/v1', kind='Deployment').delete(namespace=namespace, name=deployment_name)
        logger.info(f"Deleted deployment {deployment_name} in namespace {namespace}.")
    except Exception as e:
        logger.error(f"Error removing deployment: {e}")
        raise HTTPException(status_code=500, detail=f"Error removing deployment: {e}")

@app.post("/clean-registry/")
def clean_registry():
    namespace = os.getenv("NAMESPACE", "default")
    config_map_name = os.getenv("CONFIGMAP_NAME", "registry-cleaner-config")
    secret_name = os.getenv("SECRET_NAME", "registry-cleaner-secret")

    logger.info("Starting registry cleaning process.")

    config_data = load_config_from_configmap(namespace, config_map_name)
    secret_data = load_secrets_from_secret(namespace, secret_name)

    api_url = config_data.get("api_url")
    registry_url = config_data.get("registry_url")
    image_name = config_data.get("image_name")
    retention = config_data.get("retention", 30)
    delete_deployments = config_data.get("delete_deployments", False)
    filter_namespace = config_data.get("filter_namespace")

    username = secret_data.get("username")
    password = secret_data.get("password")

    client = get_openshift_client(api_url, username, password)

    tags = get_image_tags(client, registry_url, image_name)

    stale_tags = []
    cutoff_date = datetime.datetime.now() - datetime.timedelta(days=retention)

    for tag in tags:
        creation_date = get_image_creation_date(client, registry_url, image_name, tag)
        if creation_date and creation_date < cutoff_date:
            stale_tags.append(tag)

    if stale_tags and delete_deployments:
        for tag in stale_tags:
            remove_image_tag(client, registry_url, image_name, tag)

        deployments = get_deployments(client)
        for deployment in deployments:
            namespace = deployment.metadata.namespace
            if filter_namespace and namespace != filter_namespace:
                continue
            deployment_name = deployment.metadata.name
            containers = deployment.spec.template.spec.containers
            for container in containers:
                image = container.image
                for tag in stale_tags:
                    if f"{registry_url}/{image_name}:{tag}" in image:
                        remove_deployment(client, namespace, deployment_name)
                        break
        logger.info("Registry cleaning process completed successfully.")
        return {"message": "Registry cleaned"}
    else:
        logger.info("No stale images found, or delete not enabled.")
        return {"message": "No stale images found, or delete not enabled."}

def main():
    uvicorn.run("app:app", host="0.0.0.0", port=8000)

if __name__ == "__main__":
    main()


# requirements.txt
fastapi
uvicorn
requests
openshift-dynamic
kubernetes
PyYAML



# setup.py
from setuptools import setup, find_packages

setup(
    name='registry-cleaner-api',
    version='1.0',
    packages=find_packages(),
    install_requires=[
        'fastapi',
        'uvicorn',
        'requests',
        'openshift-dynamic',
        'kubernetes',
        'PyYAML',
    ],
    entry_points={
        'console_scripts': [
            'registry-cleaner-api = app:main',
        ],
    },
)


# cronjob.yaml (CronJob)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: registry-cleaner-api-cron
spec:
  schedule: "0 0 * * 0" # Runs every Sunday at midnight (UTC)
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: registry-cleaner-api
              image: registry-cleaner-api:latest
              imagePullPolicy: Always
              ports:
                - containerPort: 8000
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: CONFIGMAP_NAME
                  value: registry-cleaner-config
                - name: SECRET_NAME
                  value: registry-cleaner-secret
          restartPolicy: OnFailure


# config.yaml (ConfigMap)
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-cleaner-config
data:
  config.yaml: |
    api_url: "https://api.example.com:6443"
    registry_url: "image-registry.openshift-image-registry.svc:5000"
    image_name: "my-project/my-image"
    retention: 7
    delete_deployments: true
    filter_namespace: "my-project"
