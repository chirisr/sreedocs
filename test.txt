from fastapi import FastAPI, Form, Depends, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from fastapi.requests import Request
import requests
import json
import pandas as pd
import urllib3
from kubernetes import client, config
from openshift.dynamic import DynamicClient
from ocploginconfiguration import ocploginconfiguration
from typing import Optional

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

app = FastAPI()

# Set up Jinja2 for templates
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

# Sample OpenShift Clusters (Modify as needed)
CLUSTERS = {
    "Cluster1": "https://api.cluster1.example.com",
    "Cluster2": "https://api.cluster2.example.com"
}

SCANPORTAL_API_BASE = "https://scanportal.example.com"

def get_openshift_token(username, password):
    """Retrieve OpenShift token using ocploginconfiguration."""
    try:
        token = ocploginconfiguration(ocp_username=username, ocp_password=password)
        return token if token else None
    except Exception as e:
        print(f"Error retrieving OpenShift token: {e}")
        return None

def get_image_tags(registry, image_name, username, password):
    """Retrieve available tags for an image from the registry."""
    try:
        auth = (username, password)
        url = f"https://{registry}/v2/{image_name}/tags/list"
        response = requests.get(url, auth=auth, verify=False)

        if response.status_code == 200:
            return response.json().get("tags", [])
        else:
            return []
    except Exception as e:
        print(f"Error retrieving tags: {e}")
        return []

def start_scan(registry, image_name, tag, token):
    """Send scan request to ScanPortal."""
    image_reference = f"{image_name}:{tag}"
    scan_url = f"{SCANPORTAL_API_BASE}/v1/scan/reg/{registry}/image/{image_reference}/scan"
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(scan_url, headers=headers, verify=False)
    return response.json().get("scan_id") if response.status_code == 200 else None

def get_scan_result(registry, image_name, tag, token):
    """Retrieve scan results from ScanPortal."""
    image_reference = f"{image_name}:{tag}"
    results_url = f"{SCANPORTAL_API_BASE}/v1/scan/reg/{registry}/image/{image_reference}/scan"
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(results_url, headers=headers, verify=False)

    if response.status_code == 200:
        scan_data = response.json()
        vulnerabilities = [{"file": item["file"], "solution": item["solution"]}
                           for item in scan_data.get("svsc", []) if item["solution"]]
        return vulnerabilities if vulnerabilities else None
    return None

def get_pods_and_deployments(cluster, image):
    """Retrieve pods and deployments using the scanned image."""
    try:
        config.load_kube_config()
        k8s_client = client.ApiClient()
        dyn_client = DynamicClient(k8s_client)

        v1_pods = dyn_client.resources.get(api_version="v1", kind="Pod")
        pods = v1_pods.get(namespace="default").items

        matched_pods = [pod.metadata.name for pod in pods if image in str(pod)]

        return matched_pods
    except Exception as e:
        print(f"Error retrieving pods: {e}")
        return []

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request, "clusters": CLUSTERS.keys()})

@app.post("/scan")
async def scan_image(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    cluster: str = Form(...),
    registry: str = Form(...),
    image_name: str = Form(...)
):
    # Get OpenShift token
    openshift_token = get_openshift_token(username, password)
    if not openshift_token:
        raise HTTPException(status_code=401, detail="Failed to retrieve OpenShift token")

    # Fetch available tags
    tags = get_image_tags(registry, image_name, username, password)
    if not tags:
        raise HTTPException(status_code=400, detail="No image tags found")

    # Scan all tags
    scan_results = []
    for tag in tags:
        scan_id = start_scan(registry, image_name, tag, openshift_token)
        if scan_id:
            vulnerabilities = get_scan_result(registry, image_name, tag, openshift_token)
            if vulnerabilities:
                scan_results.append({"image": f"{registry}/{image_name}:{tag}", "vulnerabilities": vulnerabilities})

    # Find pods and deployments using the image
    pods = get_pods_and_deployments(cluster, f"{registry}/{image_name}")

    return templates.TemplateResponse("index.html", {"request": request, "scan_results": scan_results, "pods": pods})



<!DOCTYPE html>
<html>
<head>
    <title>OpenShift Image Scanner</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <h2>OpenShift Image Scanner</h2>
    <form action="/scan" method="post">
        <label>Username:</label>
        <input type="text" name="username" required><br>

        <label>Password:</label>
        <input type="password" name="password" required><br>

        <label>Select Cluster:</label>
        <select name="cluster">
            {% for cluster in clusters %}
            <option value="{{ cluster }}">{{ cluster }}</option>
            {% endfor %}
        </select><br>

        <label>Registry:</label>
        <input type="text" name="registry" placeholder="e.g., docker.io"><br>

        <label>Image Name:</label>
        <input type="text" name="image_name" required><br>

        <button type="submit">Scan Image</button>
    </form>

    {% if scan_results %}
    <h3>Scan Results:</h3>
    <ul>
        {% for result in scan_results %}
        <li><b>{{ result.image }}</b> - Vulnerable Files:
            <ul>
                {% for vuln in result.vulnerabilities %}
                <li>{{ vuln.file }} - {{ vuln.solution }}</li>
                {% endfor %}
            </ul>
        </li>
        {% endfor %}
    </ul>
    {% endif %}

    {% if pods %}
    <h3>Pods Using Vulnerable Images:</h3>
    <ul>
        {% for pod in pods %}
        <li>{{ pod }}</li>
        {% endfor %}
    </ul>
    {% endif %}
</body>
</html>


body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 20px;
}

h2, h3 {
    text-align: center;
}

form {
    background: white;
    padding: 20px;
    width: 400px;
    margin: auto;
    border-radius: 8px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

label {
    display: block;
    font-weight: bold;
    margin-top: 10px;
}

input, select, button {
    width: 100%;
    padding: 10px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

button {
    background-color: #28a745;
    color: white;
    font-size: 16px;
    cursor: pointer;
    margin-top: 15px;
}

button:hover {
    background-color: #218838;
}

ul {
    list-style-type: none;
    padding: 0;
}

ul li {
    background: white;
    margin: 5px 0;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);
}

app.mount("/static", StaticFiles(directory="static"), name="static")
